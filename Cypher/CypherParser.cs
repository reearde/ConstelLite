//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cypher.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace ConstelLite
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
	[System.CLSCompliant(false)]
	public partial class CypherParser : Parser
	{
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
			T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
			T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
			T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
			T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
			T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
			UNION = 46, ALL = 47, OPTIONAL = 48, MATCH = 49, UNWIND = 50, AS = 51, MERGE = 52, ON = 53,
			CREATE = 54, SET = 55, DETACH = 56, DELETE = 57, REMOVE = 58, CALL = 59, YIELD = 60,
			WITH = 61, RETURN = 62, DISTINCT = 63, ORDER = 64, BY = 65, L_SKIP = 66, LIMIT = 67,
			ASCENDING = 68, ASC = 69, DESCENDING = 70, DESC = 71, WHERE = 72, OR = 73, XOR = 74,
			AND = 75, NOT = 76, STARTS = 77, ENDS = 78, CONTAINS = 79, IN = 80, IS = 81, NULL = 82,
			COUNT = 83, CASE = 84, ELSE = 85, END = 86, WHEN = 87, THEN = 88, ANY = 89, NONE = 90,
			SINGLE = 91, EXISTS = 92, TRUE = 93, FALSE = 94, HexInteger = 95, DecimalInteger = 96,
			OctalInteger = 97, HexLetter = 98, HexDigit = 99, Digit = 100, NonZeroDigit = 101,
			NonZeroOctDigit = 102, OctDigit = 103, ZeroDigit = 104, ExponentDecimalReal = 105,
			RegularDecimalReal = 106, StringLiteral = 107, EscapedChar = 108, CONSTRAINT = 109,
			DO = 110, FOR = 111, REQUIRE = 112, UNIQUE = 113, MANDATORY = 114, SCALAR = 115, OF = 116,
			ADD = 117, DROP = 118, FILTER = 119, EXTRACT = 120, UnescapedSymbolicName = 121,
			IdentifierStart = 122, IdentifierPart = 123, EscapedSymbolicName = 124, SP = 125,
			WHITESPACE = 126, Comment = 127;
		public const int
			RULE_oC_Cypher = 0, RULE_oC_Statement = 1, RULE_oC_Query = 2, RULE_oC_RegularQuery = 3,
			RULE_oC_Union = 4, RULE_oC_SingleQuery = 5, RULE_oC_SinglePartQuery = 6,
			RULE_oC_MultiPartQuery = 7, RULE_oC_UpdatingClause = 8, RULE_oC_ReadingClause = 9,
			RULE_oC_Match = 10, RULE_oC_Unwind = 11, RULE_oC_Merge = 12, RULE_oC_MergeAction = 13,
			RULE_oC_Create = 14, RULE_oC_Set = 15, RULE_oC_SetItem = 16, RULE_oC_Delete = 17,
			RULE_oC_Remove = 18, RULE_oC_RemoveItem = 19, RULE_oC_InQueryCall = 20,
			RULE_oC_StandaloneCall = 21, RULE_oC_YieldItems = 22, RULE_oC_YieldItem = 23,
			RULE_oC_With = 24, RULE_oC_Return = 25, RULE_oC_ProjectionBody = 26, RULE_oC_ProjectionItems = 27,
			RULE_oC_ProjectionItem = 28, RULE_oC_Order = 29, RULE_oC_Skip = 30, RULE_oC_Limit = 31,
			RULE_oC_SortItem = 32, RULE_oC_Where = 33, RULE_oC_Pattern = 34, RULE_oC_PatternPart = 35,
			RULE_oC_AnonymousPatternPart = 36, RULE_oC_PatternElement = 37, RULE_oC_RelationshipsPattern = 38,
			RULE_oC_NodePattern = 39, RULE_oC_PatternElementChain = 40, RULE_oC_RelationshipPattern = 41,
			RULE_oC_RelationshipDetail = 42, RULE_oC_Properties = 43, RULE_oC_RelationshipTypes = 44,
			RULE_oC_NodeLabels = 45, RULE_oC_NodeLabel = 46, RULE_oC_RangeLiteral = 47,
			RULE_oC_LabelName = 48, RULE_oC_RelTypeName = 49, RULE_oC_PropertyExpression = 50,
			RULE_oC_Expression = 51, RULE_oC_OrExpression = 52, RULE_oC_XorExpression = 53,
			RULE_oC_AndExpression = 54, RULE_oC_NotExpression = 55, RULE_oC_ComparisonExpression = 56,
			RULE_oC_PartialComparisonExpression = 57, RULE_oC_StringListNullPredicateExpression = 58,
			RULE_oC_StringPredicateExpression = 59, RULE_oC_ListPredicateExpression = 60,
			RULE_oC_NullPredicateExpression = 61, RULE_oC_AddOrSubtractExpression = 62,
			RULE_oC_MultiplyDivideModuloExpression = 63, RULE_oC_PowerOfExpression = 64,
			RULE_oC_UnaryAddOrSubtractExpression = 65, RULE_oC_ListOperatorExpression = 66,
			RULE_oC_PropertyOrLabelsExpression = 67, RULE_oC_PropertyLookup = 68,
			RULE_oC_Atom = 69, RULE_oC_CaseExpression = 70, RULE_oC_CaseAlternative = 71,
			RULE_oC_ListComprehension = 72, RULE_oC_PatternComprehension = 73, RULE_oC_Quantifier = 74,
			RULE_oC_FilterExpression = 75, RULE_oC_PatternPredicate = 76, RULE_oC_ParenthesizedExpression = 77,
			RULE_oC_IdInColl = 78, RULE_oC_FunctionInvocation = 79, RULE_oC_FunctionName = 80,
			RULE_oC_ExistentialSubquery = 81, RULE_oC_ExplicitProcedureInvocation = 82,
			RULE_oC_ImplicitProcedureInvocation = 83, RULE_oC_ProcedureResultField = 84,
			RULE_oC_ProcedureName = 85, RULE_oC_Namespace = 86, RULE_oC_Variable = 87,
			RULE_oC_Literal = 88, RULE_oC_BooleanLiteral = 89, RULE_oC_NumberLiteral = 90,
			RULE_oC_IntegerLiteral = 91, RULE_oC_DoubleLiteral = 92, RULE_oC_ListLiteral = 93,
			RULE_oC_MapLiteral = 94, RULE_oC_PropertyKeyName = 95, RULE_oC_Parameter = 96,
			RULE_oC_SchemaName = 97, RULE_oC_ReservedWord = 98, RULE_oC_SymbolicName = 99,
			RULE_oC_LeftArrowHead = 100, RULE_oC_RightArrowHead = 101, RULE_oC_Dash = 102;
		public static readonly string[] ruleNames = {
		"oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", "oC_Union",
		"oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "oC_UpdatingClause",
		"oC_ReadingClause", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction",
		"oC_Create", "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem",
		"oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem",
		"oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem",
		"oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern",
		"oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern",
		"oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern",
		"oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels",
		"oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_PropertyExpression",
		"oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression",
		"oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression",
		"oC_StringListNullPredicateExpression", "oC_StringPredicateExpression",
		"oC_ListPredicateExpression", "oC_NullPredicateExpression", "oC_AddOrSubtractExpression",
		"oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression",
		"oC_ListOperatorExpression", "oC_PropertyOrLabelsExpression", "oC_PropertyLookup",
		"oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", "oC_ListComprehension",
		"oC_PatternComprehension", "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate",
		"oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation",
		"oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation",
		"oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", "oC_ProcedureName",
		"oC_Namespace", "oC_Variable", "oC_Literal", "oC_BooleanLiteral", "oC_NumberLiteral",
		"oC_IntegerLiteral", "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral",
		"oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", "oC_ReservedWord",
		"oC_SymbolicName", "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
	};

		private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'",
		"':'", "'|'", "'..'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", "'-'",
		"'/'", "'%'", "'^'", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", "'\\u3008'",
		"'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'",
		"'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'",
		"'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, "'0'"
	};
		private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, "UNION", "ALL",
		"OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH",
		"DELETE", "REMOVE", "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER",
		"BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE",
		"OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "IN", "IS", "NULL",
		"COUNT", "CASE", "ELSE", "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE",
		"EXISTS", "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger",
		"HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit",
		"ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "StringLiteral",
		"EscapedChar", "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY",
		"SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", "UnescapedSymbolicName",
		"IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE",
		"Comment"
	};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "Cypher.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override int[] SerializedAtn { get { return _serializedATN; } }

		static CypherParser()
		{
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++)
			{
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public CypherParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CypherParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		public partial class OC_CypherContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StatementContext oC_Statement()
			{
				return GetRuleContext<OC_StatementContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CypherParser.Eof, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_CypherContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Cypher; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Cypher(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Cypher(this);
			}
		}

		[RuleVersion(0)]
		public OC_CypherContext oC_Cypher()
		{
			OC_CypherContext _localctx = new OC_CypherContext(Context, State);
			EnterRule(_localctx, 0, RULE_oC_Cypher);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 206;
							Match(SP);
						}
					}

					State = 209;
					oC_Statement();
					State = 214;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 2, Context))
					{
						case 1:
							{
								State = 211;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 210;
										Match(SP);
									}
								}

								State = 213;
								Match(T__0);
							}
							break;
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 216;
							Match(SP);
						}
					}

					State = 219;
					Match(Eof);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_StatementContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_QueryContext oC_Query()
			{
				return GetRuleContext<OC_QueryContext>(0);
			}
			public OC_StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Statement; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Statement(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Statement(this);
			}
		}

		[RuleVersion(0)]
		public OC_StatementContext oC_Statement()
		{
			OC_StatementContext _localctx = new OC_StatementContext(Context, State);
			EnterRule(_localctx, 2, RULE_oC_Statement);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 221;
					oC_Query();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_QueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RegularQueryContext oC_RegularQuery()
			{
				return GetRuleContext<OC_RegularQueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StandaloneCallContext oC_StandaloneCall()
			{
				return GetRuleContext<OC_StandaloneCallContext>(0);
			}
			public OC_QueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Query; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Query(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Query(this);
			}
		}

		[RuleVersion(0)]
		public OC_QueryContext oC_Query()
		{
			OC_QueryContext _localctx = new OC_QueryContext(Context, State);
			EnterRule(_localctx, 4, RULE_oC_Query);
			try
			{
				State = 225;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 4, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 223;
							oC_RegularQuery();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 224;
							oC_StandaloneCall();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RegularQueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SingleQueryContext oC_SingleQuery()
			{
				return GetRuleContext<OC_SingleQueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UnionContext[] oC_Union()
			{
				return GetRuleContexts<OC_UnionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UnionContext oC_Union(int i)
			{
				return GetRuleContext<OC_UnionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_RegularQueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RegularQuery; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RegularQuery(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RegularQuery(this);
			}
		}

		[RuleVersion(0)]
		public OC_RegularQueryContext oC_RegularQuery()
		{
			OC_RegularQueryContext _localctx = new OC_RegularQueryContext(Context, State);
			EnterRule(_localctx, 6, RULE_oC_RegularQuery);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 227;
					oC_SingleQuery();
					State = 234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 229;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 228;
											Match(SP);
										}
									}

									State = 231;
									oC_Union();
								}
							}
						}
						State = 236;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_UnionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(CypherParser.UNION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(CypherParser.ALL, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SingleQueryContext oC_SingleQuery()
			{
				return GetRuleContext<OC_SingleQueryContext>(0);
			}
			public OC_UnionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Union; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Union(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Union(this);
			}
		}

		[RuleVersion(0)]
		public OC_UnionContext oC_Union()
		{
			OC_UnionContext _localctx = new OC_UnionContext(Context, State);
			EnterRule(_localctx, 8, RULE_oC_Union);
			int _la;
			try
			{
				State = 249;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 9, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 237;
								Match(UNION);
								State = 238;
								Match(SP);
								State = 239;
								Match(ALL);
								State = 241;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 240;
										Match(SP);
									}
								}

								State = 243;
								oC_SingleQuery();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 244;
								Match(UNION);
								State = 246;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 245;
										Match(SP);
									}
								}

								State = 248;
								oC_SingleQuery();
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SingleQueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SinglePartQueryContext oC_SinglePartQuery()
			{
				return GetRuleContext<OC_SinglePartQueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MultiPartQueryContext oC_MultiPartQuery()
			{
				return GetRuleContext<OC_MultiPartQueryContext>(0);
			}
			public OC_SingleQueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SingleQuery; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SingleQuery(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SingleQuery(this);
			}
		}

		[RuleVersion(0)]
		public OC_SingleQueryContext oC_SingleQuery()
		{
			OC_SingleQueryContext _localctx = new OC_SingleQueryContext(Context, State);
			EnterRule(_localctx, 10, RULE_oC_SingleQuery);
			try
			{
				State = 253;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 251;
							oC_SinglePartQuery();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 252;
							oC_MultiPartQuery();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SinglePartQueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReturnContext oC_Return()
			{
				return GetRuleContext<OC_ReturnContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReadingClauseContext[] oC_ReadingClause()
			{
				return GetRuleContexts<OC_ReadingClauseContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReadingClauseContext oC_ReadingClause(int i)
			{
				return GetRuleContext<OC_ReadingClauseContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UpdatingClauseContext[] oC_UpdatingClause()
			{
				return GetRuleContexts<OC_UpdatingClauseContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UpdatingClauseContext oC_UpdatingClause(int i)
			{
				return GetRuleContext<OC_UpdatingClauseContext>(i);
			}
			public OC_SinglePartQueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SinglePartQuery; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SinglePartQuery(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SinglePartQuery(this);
			}
		}

		[RuleVersion(0)]
		public OC_SinglePartQueryContext oC_SinglePartQuery()
		{
			OC_SinglePartQueryContext _localctx = new OC_SinglePartQueryContext(Context, State);
			EnterRule(_localctx, 12, RULE_oC_SinglePartQuery);
			int _la;
			try
			{
				int _alt;
				State = 290;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 19, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 261;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (((_la) & ~0x3f) == 0 && ((1L << _la) & 578431077140398080L) != 0)
								{
									{
										{
											State = 255;
											oC_ReadingClause();
											State = 257;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											if (_la == SP)
											{
												{
													State = 256;
													Match(SP);
												}
											}

										}
									}
									State = 263;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 264;
								oC_Return();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 271;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (((_la) & ~0x3f) == 0 && ((1L << _la) & 578431077140398080L) != 0)
								{
									{
										{
											State = 265;
											oC_ReadingClause();
											State = 267;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											if (_la == SP)
											{
												{
													State = 266;
													Match(SP);
												}
											}

										}
									}
									State = 273;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 274;
								oC_UpdatingClause();
								State = 281;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 276;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 275;
														Match(SP);
													}
												}

												State = 278;
												oC_UpdatingClause();
											}
										}
									}
									State = 283;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
								}
								State = 288;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 18, Context))
								{
									case 1:
										{
											State = 285;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											if (_la == SP)
											{
												{
													State = 284;
													Match(SP);
												}
											}

											State = 287;
											oC_Return();
										}
										break;
								}
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MultiPartQueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SinglePartQueryContext oC_SinglePartQuery()
			{
				return GetRuleContext<OC_SinglePartQueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WithContext[] oC_With()
			{
				return GetRuleContexts<OC_WithContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WithContext oC_With(int i)
			{
				return GetRuleContext<OC_WithContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReadingClauseContext[] oC_ReadingClause()
			{
				return GetRuleContexts<OC_ReadingClauseContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReadingClauseContext oC_ReadingClause(int i)
			{
				return GetRuleContext<OC_ReadingClauseContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UpdatingClauseContext[] oC_UpdatingClause()
			{
				return GetRuleContexts<OC_UpdatingClauseContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UpdatingClauseContext oC_UpdatingClause(int i)
			{
				return GetRuleContext<OC_UpdatingClauseContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_MultiPartQueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_MultiPartQuery; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_MultiPartQuery(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_MultiPartQuery(this);
			}
		}

		[RuleVersion(0)]
		public OC_MultiPartQueryContext oC_MultiPartQuery()
		{
			OC_MultiPartQueryContext _localctx = new OC_MultiPartQueryContext(Context, State);
			EnterRule(_localctx, 14, RULE_oC_MultiPartQuery);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 314;
					ErrorHandler.Sync(this);
					_alt = 1;
					do
					{
						switch (_alt)
						{
							case 1:
								{
									{
										State = 298;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										while (((_la) & ~0x3f) == 0 && ((1L << _la) & 578431077140398080L) != 0)
										{
											{
												{
													State = 292;
													oC_ReadingClause();
													State = 294;
													ErrorHandler.Sync(this);
													_la = TokenStream.LA(1);
													if (_la == SP)
													{
														{
															State = 293;
															Match(SP);
														}
													}

												}
											}
											State = 300;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
										}
										State = 307;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										while (((_la) & ~0x3f) == 0 && ((1L << _la) & 562949953421312000L) != 0)
										{
											{
												{
													State = 301;
													oC_UpdatingClause();
													State = 303;
													ErrorHandler.Sync(this);
													_la = TokenStream.LA(1);
													if (_la == SP)
													{
														{
															State = 302;
															Match(SP);
														}
													}

												}
											}
											State = 309;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
										}
										State = 310;
										oC_With();
										State = 312;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 311;
												Match(SP);
											}
										}

									}
								}
								break;
							default:
								throw new NoViableAltException(this);
						}
						State = 316;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 25, Context);
					} while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
					State = 318;
					oC_SinglePartQuery();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_UpdatingClauseContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_CreateContext oC_Create()
			{
				return GetRuleContext<OC_CreateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MergeContext oC_Merge()
			{
				return GetRuleContext<OC_MergeContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_DeleteContext oC_Delete()
			{
				return GetRuleContext<OC_DeleteContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SetContext oC_Set()
			{
				return GetRuleContext<OC_SetContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RemoveContext oC_Remove()
			{
				return GetRuleContext<OC_RemoveContext>(0);
			}
			public OC_UpdatingClauseContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_UpdatingClause; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_UpdatingClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_UpdatingClause(this);
			}
		}

		[RuleVersion(0)]
		public OC_UpdatingClauseContext oC_UpdatingClause()
		{
			OC_UpdatingClauseContext _localctx = new OC_UpdatingClauseContext(Context, State);
			EnterRule(_localctx, 16, RULE_oC_UpdatingClause);
			try
			{
				State = 325;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case CREATE:
						EnterOuterAlt(_localctx, 1);
						{
							State = 320;
							oC_Create();
						}
						break;
					case MERGE:
						EnterOuterAlt(_localctx, 2);
						{
							State = 321;
							oC_Merge();
						}
						break;
					case DETACH:
					case DELETE:
						EnterOuterAlt(_localctx, 3);
						{
							State = 322;
							oC_Delete();
						}
						break;
					case SET:
						EnterOuterAlt(_localctx, 4);
						{
							State = 323;
							oC_Set();
						}
						break;
					case REMOVE:
						EnterOuterAlt(_localctx, 5);
						{
							State = 324;
							oC_Remove();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ReadingClauseContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MatchContext oC_Match()
			{
				return GetRuleContext<OC_MatchContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UnwindContext oC_Unwind()
			{
				return GetRuleContext<OC_UnwindContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_InQueryCallContext oC_InQueryCall()
			{
				return GetRuleContext<OC_InQueryCallContext>(0);
			}
			public OC_ReadingClauseContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ReadingClause; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ReadingClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ReadingClause(this);
			}
		}

		[RuleVersion(0)]
		public OC_ReadingClauseContext oC_ReadingClause()
		{
			OC_ReadingClauseContext _localctx = new OC_ReadingClauseContext(Context, State);
			EnterRule(_localctx, 18, RULE_oC_ReadingClause);
			try
			{
				State = 330;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case OPTIONAL:
					case MATCH:
						EnterOuterAlt(_localctx, 1);
						{
							State = 327;
							oC_Match();
						}
						break;
					case UNWIND:
						EnterOuterAlt(_localctx, 2);
						{
							State = 328;
							oC_Unwind();
						}
						break;
					case CALL:
						EnterOuterAlt(_localctx, 3);
						{
							State = 329;
							oC_InQueryCall();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MatchContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(CypherParser.MATCH, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternContext oC_Pattern()
			{
				return GetRuleContext<OC_PatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(CypherParser.OPTIONAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			public OC_MatchContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Match; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Match(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Match(this);
			}
		}

		[RuleVersion(0)]
		public OC_MatchContext oC_Match()
		{
			OC_MatchContext _localctx = new OC_MatchContext(Context, State);
			EnterRule(_localctx, 20, RULE_oC_Match);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == OPTIONAL)
					{
						{
							State = 332;
							Match(OPTIONAL);
							State = 333;
							Match(SP);
						}
					}

					State = 336;
					Match(MATCH);
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 337;
							Match(SP);
						}
					}

					State = 340;
					oC_Pattern();
					State = 345;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 31, Context))
					{
						case 1:
							{
								State = 342;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 341;
										Match(SP);
									}
								}

								State = 344;
								oC_Where();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_UnwindContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNWIND() { return GetToken(CypherParser.UNWIND, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CypherParser.AS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			public OC_UnwindContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Unwind; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Unwind(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Unwind(this);
			}
		}

		[RuleVersion(0)]
		public OC_UnwindContext oC_Unwind()
		{
			OC_UnwindContext _localctx = new OC_UnwindContext(Context, State);
			EnterRule(_localctx, 22, RULE_oC_Unwind);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 347;
					Match(UNWIND);
					State = 349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 348;
							Match(SP);
						}
					}

					State = 351;
					oC_Expression();
					State = 352;
					Match(SP);
					State = 353;
					Match(AS);
					State = 354;
					Match(SP);
					State = 355;
					oC_Variable();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MergeContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(CypherParser.MERGE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternPartContext oC_PatternPart()
			{
				return GetRuleContext<OC_PatternPartContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MergeActionContext[] oC_MergeAction()
			{
				return GetRuleContexts<OC_MergeActionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MergeActionContext oC_MergeAction(int i)
			{
				return GetRuleContext<OC_MergeActionContext>(i);
			}
			public OC_MergeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Merge; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Merge(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Merge(this);
			}
		}

		[RuleVersion(0)]
		public OC_MergeContext oC_Merge()
		{
			OC_MergeContext _localctx = new OC_MergeContext(Context, State);
			EnterRule(_localctx, 24, RULE_oC_Merge);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 357;
					Match(MERGE);
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 358;
							Match(SP);
						}
					}

					State = 361;
					oC_PatternPart();
					State = 366;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 362;
									Match(SP);
									State = 363;
									oC_MergeAction();
								}
							}
						}
						State = 368;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MergeActionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(CypherParser.ON, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(CypherParser.MATCH, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SetContext oC_Set()
			{
				return GetRuleContext<OC_SetContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(CypherParser.CREATE, 0); }
			public OC_MergeActionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_MergeAction; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_MergeAction(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_MergeAction(this);
			}
		}

		[RuleVersion(0)]
		public OC_MergeActionContext oC_MergeAction()
		{
			OC_MergeActionContext _localctx = new OC_MergeActionContext(Context, State);
			EnterRule(_localctx, 26, RULE_oC_MergeAction);
			try
			{
				State = 379;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 35, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 369;
								Match(ON);
								State = 370;
								Match(SP);
								State = 371;
								Match(MATCH);
								State = 372;
								Match(SP);
								State = 373;
								oC_Set();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 374;
								Match(ON);
								State = 375;
								Match(SP);
								State = 376;
								Match(CREATE);
								State = 377;
								Match(SP);
								State = 378;
								oC_Set();
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_CreateContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(CypherParser.CREATE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternContext oC_Pattern()
			{
				return GetRuleContext<OC_PatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_CreateContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Create; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Create(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Create(this);
			}
		}

		[RuleVersion(0)]
		public OC_CreateContext oC_Create()
		{
			OC_CreateContext _localctx = new OC_CreateContext(Context, State);
			EnterRule(_localctx, 28, RULE_oC_Create);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 381;
					Match(CREATE);
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 382;
							Match(SP);
						}
					}

					State = 385;
					oC_Pattern();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SetContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CypherParser.SET, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SetItemContext[] oC_SetItem()
			{
				return GetRuleContexts<OC_SetItemContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SetItemContext oC_SetItem(int i)
			{
				return GetRuleContext<OC_SetItemContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_SetContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Set; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Set(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Set(this);
			}
		}

		[RuleVersion(0)]
		public OC_SetContext oC_Set()
		{
			OC_SetContext _localctx = new OC_SetContext(Context, State);
			EnterRule(_localctx, 30, RULE_oC_Set);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 387;
					Match(SET);
					State = 389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 388;
							Match(SP);
						}
					}

					State = 391;
					oC_SetItem();
					State = 402;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 40, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 393;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 392;
											Match(SP);
										}
									}

									State = 395;
									Match(T__1);
									State = 397;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 396;
											Match(SP);
										}
									}

									State = 399;
									oC_SetItem();
								}
							}
						}
						State = 404;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 40, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SetItemContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyExpressionContext oC_PropertyExpression()
			{
				return GetRuleContext<OC_PropertyExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelsContext oC_NodeLabels()
			{
				return GetRuleContext<OC_NodeLabelsContext>(0);
			}
			public OC_SetItemContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SetItem; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SetItem(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SetItem(this);
			}
		}

		[RuleVersion(0)]
		public OC_SetItemContext oC_SetItem()
		{
			OC_SetItemContext _localctx = new OC_SetItemContext(Context, State);
			EnterRule(_localctx, 32, RULE_oC_SetItem);
			int _la;
			try
			{
				State = 441;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 48, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 405;
								oC_PropertyExpression();
								State = 407;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 406;
										Match(SP);
									}
								}

								State = 409;
								Match(T__2);
								State = 411;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 410;
										Match(SP);
									}
								}

								State = 413;
								oC_Expression();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 415;
								oC_Variable();
								State = 417;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 416;
										Match(SP);
									}
								}

								State = 419;
								Match(T__2);
								State = 421;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 420;
										Match(SP);
									}
								}

								State = 423;
								oC_Expression();
							}
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							{
								State = 425;
								oC_Variable();
								State = 427;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 426;
										Match(SP);
									}
								}

								State = 429;
								Match(T__3);
								State = 431;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 430;
										Match(SP);
									}
								}

								State = 433;
								oC_Expression();
							}
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							{
								State = 435;
								oC_Variable();
								State = 437;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 436;
										Match(SP);
									}
								}

								State = 439;
								oC_NodeLabels();
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_DeleteContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(CypherParser.DELETE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(CypherParser.DETACH, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_DeleteContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Delete; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Delete(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Delete(this);
			}
		}

		[RuleVersion(0)]
		public OC_DeleteContext oC_Delete()
		{
			OC_DeleteContext _localctx = new OC_DeleteContext(Context, State);
			EnterRule(_localctx, 34, RULE_oC_Delete);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 445;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == DETACH)
					{
						{
							State = 443;
							Match(DETACH);
							State = 444;
							Match(SP);
						}
					}

					State = 447;
					Match(DELETE);
					State = 449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 448;
							Match(SP);
						}
					}

					State = 451;
					oC_Expression();
					State = 462;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 53, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 453;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 452;
											Match(SP);
										}
									}

									State = 455;
									Match(T__1);
									State = 457;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 456;
											Match(SP);
										}
									}

									State = 459;
									oC_Expression();
								}
							}
						}
						State = 464;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 53, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RemoveContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(CypherParser.REMOVE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RemoveItemContext[] oC_RemoveItem()
			{
				return GetRuleContexts<OC_RemoveItemContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RemoveItemContext oC_RemoveItem(int i)
			{
				return GetRuleContext<OC_RemoveItemContext>(i);
			}
			public OC_RemoveContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Remove; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Remove(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Remove(this);
			}
		}

		[RuleVersion(0)]
		public OC_RemoveContext oC_Remove()
		{
			OC_RemoveContext _localctx = new OC_RemoveContext(Context, State);
			EnterRule(_localctx, 36, RULE_oC_Remove);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 465;
					Match(REMOVE);
					State = 466;
					Match(SP);
					State = 467;
					oC_RemoveItem();
					State = 478;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 56, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 469;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 468;
											Match(SP);
										}
									}

									State = 471;
									Match(T__1);
									State = 473;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 472;
											Match(SP);
										}
									}

									State = 475;
									oC_RemoveItem();
								}
							}
						}
						State = 480;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 56, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RemoveItemContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelsContext oC_NodeLabels()
			{
				return GetRuleContext<OC_NodeLabelsContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyExpressionContext oC_PropertyExpression()
			{
				return GetRuleContext<OC_PropertyExpressionContext>(0);
			}
			public OC_RemoveItemContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RemoveItem; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RemoveItem(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RemoveItem(this);
			}
		}

		[RuleVersion(0)]
		public OC_RemoveItemContext oC_RemoveItem()
		{
			OC_RemoveItemContext _localctx = new OC_RemoveItemContext(Context, State);
			EnterRule(_localctx, 38, RULE_oC_RemoveItem);
			try
			{
				State = 485;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 57, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 481;
								oC_Variable();
								State = 482;
								oC_NodeLabels();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 484;
							oC_PropertyExpression();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_InQueryCallContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(CypherParser.CALL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExplicitProcedureInvocationContext oC_ExplicitProcedureInvocation()
			{
				return GetRuleContext<OC_ExplicitProcedureInvocationContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CypherParser.YIELD, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_YieldItemsContext oC_YieldItems()
			{
				return GetRuleContext<OC_YieldItemsContext>(0);
			}
			public OC_InQueryCallContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_InQueryCall; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_InQueryCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_InQueryCall(this);
			}
		}

		[RuleVersion(0)]
		public OC_InQueryCallContext oC_InQueryCall()
		{
			OC_InQueryCallContext _localctx = new OC_InQueryCallContext(Context, State);
			EnterRule(_localctx, 40, RULE_oC_InQueryCall);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 487;
					Match(CALL);
					State = 488;
					Match(SP);
					State = 489;
					oC_ExplicitProcedureInvocation();
					State = 496;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 59, Context))
					{
						case 1:
							{
								State = 491;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 490;
										Match(SP);
									}
								}

								State = 493;
								Match(YIELD);
								State = 494;
								Match(SP);
								State = 495;
								oC_YieldItems();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_StandaloneCallContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(CypherParser.CALL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExplicitProcedureInvocationContext oC_ExplicitProcedureInvocation()
			{
				return GetRuleContext<OC_ExplicitProcedureInvocationContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ImplicitProcedureInvocationContext oC_ImplicitProcedureInvocation()
			{
				return GetRuleContext<OC_ImplicitProcedureInvocationContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CypherParser.YIELD, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_YieldItemsContext oC_YieldItems()
			{
				return GetRuleContext<OC_YieldItemsContext>(0);
			}
			public OC_StandaloneCallContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_StandaloneCall; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_StandaloneCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_StandaloneCall(this);
			}
		}

		[RuleVersion(0)]
		public OC_StandaloneCallContext oC_StandaloneCall()
		{
			OC_StandaloneCallContext _localctx = new OC_StandaloneCallContext(Context, State);
			EnterRule(_localctx, 42, RULE_oC_StandaloneCall);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 498;
					Match(CALL);
					State = 499;
					Match(SP);
					State = 502;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 60, Context))
					{
						case 1:
							{
								State = 500;
								oC_ExplicitProcedureInvocation();
							}
							break;
						case 2:
							{
								State = 501;
								oC_ImplicitProcedureInvocation();
							}
							break;
					}
					State = 513;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 63, Context))
					{
						case 1:
							{
								State = 505;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 504;
										Match(SP);
									}
								}

								State = 507;
								Match(YIELD);
								State = 508;
								Match(SP);
								State = 511;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1))
								{
									case T__4:
										{
											State = 509;
											Match(T__4);
										}
										break;
									case COUNT:
									case ANY:
									case NONE:
									case SINGLE:
									case HexLetter:
									case FILTER:
									case EXTRACT:
									case UnescapedSymbolicName:
									case EscapedSymbolicName:
										{
											State = 510;
											oC_YieldItems();
										}
										break;
									default:
										throw new NoViableAltException(this);
								}
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_YieldItemsContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_YieldItemContext[] oC_YieldItem()
			{
				return GetRuleContexts<OC_YieldItemContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_YieldItemContext oC_YieldItem(int i)
			{
				return GetRuleContext<OC_YieldItemContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_YieldItemsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_YieldItems; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_YieldItems(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_YieldItems(this);
			}
		}

		[RuleVersion(0)]
		public OC_YieldItemsContext oC_YieldItems()
		{
			OC_YieldItemsContext _localctx = new OC_YieldItemsContext(Context, State);
			EnterRule(_localctx, 44, RULE_oC_YieldItems);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 515;
					oC_YieldItem();
					State = 526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 66, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 517;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 516;
											Match(SP);
										}
									}

									State = 519;
									Match(T__1);
									State = 521;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 520;
											Match(SP);
										}
									}

									State = 523;
									oC_YieldItem();
								}
							}
						}
						State = 528;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 66, Context);
					}
					State = 533;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 68, Context))
					{
						case 1:
							{
								State = 530;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 529;
										Match(SP);
									}
								}

								State = 532;
								oC_Where();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_YieldItemContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProcedureResultFieldContext oC_ProcedureResultField()
			{
				return GetRuleContext<OC_ProcedureResultFieldContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CypherParser.AS, 0); }
			public OC_YieldItemContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_YieldItem; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_YieldItem(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_YieldItem(this);
			}
		}

		[RuleVersion(0)]
		public OC_YieldItemContext oC_YieldItem()
		{
			OC_YieldItemContext _localctx = new OC_YieldItemContext(Context, State);
			EnterRule(_localctx, 46, RULE_oC_YieldItem);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 540;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 69, Context))
					{
						case 1:
							{
								State = 535;
								oC_ProcedureResultField();
								State = 536;
								Match(SP);
								State = 537;
								Match(AS);
								State = 538;
								Match(SP);
							}
							break;
					}
					State = 542;
					oC_Variable();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_WithContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(CypherParser.WITH, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProjectionBodyContext oC_ProjectionBody()
			{
				return GetRuleContext<OC_ProjectionBodyContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_WithContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_With; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_With(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_With(this);
			}
		}

		[RuleVersion(0)]
		public OC_WithContext oC_With()
		{
			OC_WithContext _localctx = new OC_WithContext(Context, State);
			EnterRule(_localctx, 48, RULE_oC_With);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 544;
					Match(WITH);
					State = 545;
					oC_ProjectionBody();
					State = 550;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 71, Context))
					{
						case 1:
							{
								State = 547;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 546;
										Match(SP);
									}
								}

								State = 549;
								oC_Where();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ReturnContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CypherParser.RETURN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProjectionBodyContext oC_ProjectionBody()
			{
				return GetRuleContext<OC_ProjectionBodyContext>(0);
			}
			public OC_ReturnContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Return; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Return(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Return(this);
			}
		}

		[RuleVersion(0)]
		public OC_ReturnContext oC_Return()
		{
			OC_ReturnContext _localctx = new OC_ReturnContext(Context, State);
			EnterRule(_localctx, 50, RULE_oC_Return);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 552;
					Match(RETURN);
					State = 553;
					oC_ProjectionBody();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ProjectionBodyContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProjectionItemsContext oC_ProjectionItems()
			{
				return GetRuleContext<OC_ProjectionItemsContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(CypherParser.DISTINCT, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_OrderContext oC_Order()
			{
				return GetRuleContext<OC_OrderContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SkipContext oC_Skip()
			{
				return GetRuleContext<OC_SkipContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_LimitContext oC_Limit()
			{
				return GetRuleContext<OC_LimitContext>(0);
			}
			public OC_ProjectionBodyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ProjectionBody; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ProjectionBody(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ProjectionBody(this);
			}
		}

		[RuleVersion(0)]
		public OC_ProjectionBodyContext oC_ProjectionBody()
		{
			OC_ProjectionBodyContext _localctx = new OC_ProjectionBodyContext(Context, State);
			EnterRule(_localctx, 52, RULE_oC_ProjectionBody);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 559;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 73, Context))
					{
						case 1:
							{
								State = 556;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 555;
										Match(SP);
									}
								}

								State = 558;
								Match(DISTINCT);
							}
							break;
					}
					State = 561;
					Match(SP);
					State = 562;
					oC_ProjectionItems();
					State = 565;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 74, Context))
					{
						case 1:
							{
								State = 563;
								Match(SP);
								State = 564;
								oC_Order();
							}
							break;
					}
					State = 569;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 75, Context))
					{
						case 1:
							{
								State = 567;
								Match(SP);
								State = 568;
								oC_Skip();
							}
							break;
					}
					State = 573;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 76, Context))
					{
						case 1:
							{
								State = 571;
								Match(SP);
								State = 572;
								oC_Limit();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ProjectionItemsContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProjectionItemContext[] oC_ProjectionItem()
			{
				return GetRuleContexts<OC_ProjectionItemContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProjectionItemContext oC_ProjectionItem(int i)
			{
				return GetRuleContext<OC_ProjectionItemContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_ProjectionItemsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ProjectionItems; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ProjectionItems(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ProjectionItems(this);
			}
		}

		[RuleVersion(0)]
		public OC_ProjectionItemsContext oC_ProjectionItems()
		{
			OC_ProjectionItemsContext _localctx = new OC_ProjectionItemsContext(Context, State);
			EnterRule(_localctx, 54, RULE_oC_ProjectionItems);
			int _la;
			try
			{
				int _alt;
				State = 603;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case T__4:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 575;
								Match(T__4);
								State = 586;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 79, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 577;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 576;
														Match(SP);
													}
												}

												State = 579;
												Match(T__1);
												State = 581;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 580;
														Match(SP);
													}
												}

												State = 583;
												oC_ProjectionItem();
											}
										}
									}
									State = 588;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 79, Context);
								}
							}
						}
						break;
					case T__5:
					case T__7:
					case T__17:
					case T__18:
					case T__23:
					case T__25:
					case ALL:
					case NOT:
					case NULL:
					case COUNT:
					case CASE:
					case ANY:
					case NONE:
					case SINGLE:
					case EXISTS:
					case TRUE:
					case FALSE:
					case HexInteger:
					case DecimalInteger:
					case OctalInteger:
					case HexLetter:
					case ExponentDecimalReal:
					case RegularDecimalReal:
					case StringLiteral:
					case FILTER:
					case EXTRACT:
					case UnescapedSymbolicName:
					case EscapedSymbolicName:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 589;
								oC_ProjectionItem();
								State = 600;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 82, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 591;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 590;
														Match(SP);
													}
												}

												State = 593;
												Match(T__1);
												State = 595;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 594;
														Match(SP);
													}
												}

												State = 597;
												oC_ProjectionItem();
											}
										}
									}
									State = 602;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 82, Context);
								}
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ProjectionItemContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CypherParser.AS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			public OC_ProjectionItemContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ProjectionItem; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ProjectionItem(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ProjectionItem(this);
			}
		}

		[RuleVersion(0)]
		public OC_ProjectionItemContext oC_ProjectionItem()
		{
			OC_ProjectionItemContext _localctx = new OC_ProjectionItemContext(Context, State);
			EnterRule(_localctx, 56, RULE_oC_ProjectionItem);
			try
			{
				State = 612;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 84, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 605;
								oC_Expression();
								State = 606;
								Match(SP);
								State = 607;
								Match(AS);
								State = 608;
								Match(SP);
								State = 609;
								oC_Variable();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 611;
							oC_Expression();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_OrderContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(CypherParser.ORDER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(CypherParser.BY, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SortItemContext[] oC_SortItem()
			{
				return GetRuleContexts<OC_SortItemContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SortItemContext oC_SortItem(int i)
			{
				return GetRuleContext<OC_SortItemContext>(i);
			}
			public OC_OrderContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Order; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Order(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Order(this);
			}
		}

		[RuleVersion(0)]
		public OC_OrderContext oC_Order()
		{
			OC_OrderContext _localctx = new OC_OrderContext(Context, State);
			EnterRule(_localctx, 58, RULE_oC_Order);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 614;
					Match(ORDER);
					State = 615;
					Match(SP);
					State = 616;
					Match(BY);
					State = 617;
					Match(SP);
					State = 618;
					oC_SortItem();
					State = 626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == T__1)
					{
						{
							{
								State = 619;
								Match(T__1);
								State = 621;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 620;
										Match(SP);
									}
								}

								State = 623;
								oC_SortItem();
							}
						}
						State = 628;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SkipContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_SKIP() { return GetToken(CypherParser.L_SKIP, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			public OC_SkipContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Skip; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Skip(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Skip(this);
			}
		}

		[RuleVersion(0)]
		public OC_SkipContext oC_Skip()
		{
			OC_SkipContext _localctx = new OC_SkipContext(Context, State);
			EnterRule(_localctx, 60, RULE_oC_Skip);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 629;
					Match(L_SKIP);
					State = 630;
					Match(SP);
					State = 631;
					oC_Expression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_LimitContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(CypherParser.LIMIT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			public OC_LimitContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Limit; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Limit(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Limit(this);
			}
		}

		[RuleVersion(0)]
		public OC_LimitContext oC_Limit()
		{
			OC_LimitContext _localctx = new OC_LimitContext(Context, State);
			EnterRule(_localctx, 62, RULE_oC_Limit);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 633;
					Match(LIMIT);
					State = 634;
					Match(SP);
					State = 635;
					oC_Expression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SortItemContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(CypherParser.ASCENDING, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(CypherParser.ASC, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(CypherParser.DESCENDING, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(CypherParser.DESC, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_SortItemContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SortItem; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SortItem(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SortItem(this);
			}
		}

		[RuleVersion(0)]
		public OC_SortItemContext oC_SortItem()
		{
			OC_SortItemContext _localctx = new OC_SortItemContext(Context, State);
			EnterRule(_localctx, 64, RULE_oC_SortItem);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 637;
					oC_Expression();
					State = 642;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 88, Context))
					{
						case 1:
							{
								State = 639;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 638;
										Match(SP);
									}
								}

								State = 641;
								_la = TokenStream.LA(1);
								if (!((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 15L) != 0))
								{
									ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_WhereContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(CypherParser.WHERE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			public OC_WhereContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Where; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Where(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Where(this);
			}
		}

		[RuleVersion(0)]
		public OC_WhereContext oC_Where()
		{
			OC_WhereContext _localctx = new OC_WhereContext(Context, State);
			EnterRule(_localctx, 66, RULE_oC_Where);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 644;
					Match(WHERE);
					State = 645;
					Match(SP);
					State = 646;
					oC_Expression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternPartContext[] oC_PatternPart()
			{
				return GetRuleContexts<OC_PatternPartContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternPartContext oC_PatternPart(int i)
			{
				return GetRuleContext<OC_PatternPartContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_PatternContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Pattern; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Pattern(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Pattern(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternContext oC_Pattern()
		{
			OC_PatternContext _localctx = new OC_PatternContext(Context, State);
			EnterRule(_localctx, 68, RULE_oC_Pattern);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 648;
					oC_PatternPart();
					State = 659;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 91, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 650;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 649;
											Match(SP);
										}
									}

									State = 652;
									Match(T__1);
									State = 654;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 653;
											Match(SP);
										}
									}

									State = 656;
									oC_PatternPart();
								}
							}
						}
						State = 661;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 91, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternPartContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AnonymousPatternPartContext oC_AnonymousPatternPart()
			{
				return GetRuleContext<OC_AnonymousPatternPartContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_PatternPartContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PatternPart; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PatternPart(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PatternPart(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternPartContext oC_PatternPart()
		{
			OC_PatternPartContext _localctx = new OC_PatternPartContext(Context, State);
			EnterRule(_localctx, 70, RULE_oC_PatternPart);
			int _la;
			try
			{
				State = 673;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case COUNT:
					case ANY:
					case NONE:
					case SINGLE:
					case HexLetter:
					case FILTER:
					case EXTRACT:
					case UnescapedSymbolicName:
					case EscapedSymbolicName:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 662;
								oC_Variable();
								State = 664;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 663;
										Match(SP);
									}
								}

								State = 666;
								Match(T__2);
								State = 668;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 667;
										Match(SP);
									}
								}

								State = 670;
								oC_AnonymousPatternPart();
							}
						}
						break;
					case T__5:
						EnterOuterAlt(_localctx, 2);
						{
							State = 672;
							oC_AnonymousPatternPart();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_AnonymousPatternPartContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementContext oC_PatternElement()
			{
				return GetRuleContext<OC_PatternElementContext>(0);
			}
			public OC_AnonymousPatternPartContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_AnonymousPatternPart; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_AnonymousPatternPart(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_AnonymousPatternPart(this);
			}
		}

		[RuleVersion(0)]
		public OC_AnonymousPatternPartContext oC_AnonymousPatternPart()
		{
			OC_AnonymousPatternPartContext _localctx = new OC_AnonymousPatternPartContext(Context, State);
			EnterRule(_localctx, 72, RULE_oC_AnonymousPatternPart);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 675;
					oC_PatternElement();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternElementContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodePatternContext oC_NodePattern()
			{
				return GetRuleContext<OC_NodePatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementChainContext[] oC_PatternElementChain()
			{
				return GetRuleContexts<OC_PatternElementChainContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementChainContext oC_PatternElementChain(int i)
			{
				return GetRuleContext<OC_PatternElementChainContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementContext oC_PatternElement()
			{
				return GetRuleContext<OC_PatternElementContext>(0);
			}
			public OC_PatternElementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PatternElement; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PatternElement(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PatternElement(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternElementContext oC_PatternElement()
		{
			OC_PatternElementContext _localctx = new OC_PatternElementContext(Context, State);
			EnterRule(_localctx, 74, RULE_oC_PatternElement);
			int _la;
			try
			{
				int _alt;
				State = 691;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 97, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 677;
								oC_NodePattern();
								State = 684;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 96, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 679;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 678;
														Match(SP);
													}
												}

												State = 681;
												oC_PatternElementChain();
											}
										}
									}
									State = 686;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 96, Context);
								}
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 687;
								Match(T__5);
								State = 688;
								oC_PatternElement();
								State = 689;
								Match(T__6);
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RelationshipsPatternContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodePatternContext oC_NodePattern()
			{
				return GetRuleContext<OC_NodePatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementChainContext[] oC_PatternElementChain()
			{
				return GetRuleContexts<OC_PatternElementChainContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternElementChainContext oC_PatternElementChain(int i)
			{
				return GetRuleContext<OC_PatternElementChainContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_RelationshipsPatternContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RelationshipsPattern; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RelationshipsPattern(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RelationshipsPattern(this);
			}
		}

		[RuleVersion(0)]
		public OC_RelationshipsPatternContext oC_RelationshipsPattern()
		{
			OC_RelationshipsPatternContext _localctx = new OC_RelationshipsPatternContext(Context, State);
			EnterRule(_localctx, 76, RULE_oC_RelationshipsPattern);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 693;
					oC_NodePattern();
					State = 698;
					ErrorHandler.Sync(this);
					_alt = 1;
					do
					{
						switch (_alt)
						{
							case 1:
								{
									{
										State = 695;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 694;
												Match(SP);
											}
										}

										State = 697;
										oC_PatternElementChain();
									}
								}
								break;
							default:
								throw new NoViableAltException(this);
						}
						State = 700;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 99, Context);
					} while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NodePatternContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelsContext oC_NodeLabels()
			{
				return GetRuleContext<OC_NodeLabelsContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertiesContext oC_Properties()
			{
				return GetRuleContext<OC_PropertiesContext>(0);
			}
			public OC_NodePatternContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NodePattern; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NodePattern(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NodePattern(this);
			}
		}

		[RuleVersion(0)]
		public OC_NodePatternContext oC_NodePattern()
		{
			OC_NodePatternContext _localctx = new OC_NodePatternContext(Context, State);
			EnterRule(_localctx, 78, RULE_oC_NodePattern);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 702;
					Match(T__5);
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 703;
							Match(SP);
						}
					}

					State = 710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 2680059625921L) != 0)
					{
						{
							State = 706;
							oC_Variable();
							State = 708;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 707;
									Match(SP);
								}
							}

						}
					}

					State = 716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__9)
					{
						{
							State = 712;
							oC_NodeLabels();
							State = 714;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 713;
									Match(SP);
								}
							}

						}
					}

					State = 722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__23 || _la == T__25)
					{
						{
							State = 718;
							oC_Properties();
							State = 720;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 719;
									Match(SP);
								}
							}

						}
					}

					State = 724;
					Match(T__6);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternElementChainContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelationshipPatternContext oC_RelationshipPattern()
			{
				return GetRuleContext<OC_RelationshipPatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodePatternContext oC_NodePattern()
			{
				return GetRuleContext<OC_NodePatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_PatternElementChainContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PatternElementChain; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PatternElementChain(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PatternElementChain(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternElementChainContext oC_PatternElementChain()
		{
			OC_PatternElementChainContext _localctx = new OC_PatternElementChainContext(Context, State);
			EnterRule(_localctx, 80, RULE_oC_PatternElementChain);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 726;
					oC_RelationshipPattern();
					State = 728;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 727;
							Match(SP);
						}
					}

					State = 730;
					oC_NodePattern();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RelationshipPatternContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_LeftArrowHeadContext oC_LeftArrowHead()
			{
				return GetRuleContext<OC_LeftArrowHeadContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_DashContext[] oC_Dash()
			{
				return GetRuleContexts<OC_DashContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_DashContext oC_Dash(int i)
			{
				return GetRuleContext<OC_DashContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RightArrowHeadContext oC_RightArrowHead()
			{
				return GetRuleContext<OC_RightArrowHeadContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelationshipDetailContext oC_RelationshipDetail()
			{
				return GetRuleContext<OC_RelationshipDetailContext>(0);
			}
			public OC_RelationshipPatternContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RelationshipPattern; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RelationshipPattern(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RelationshipPattern(this);
			}
		}

		[RuleVersion(0)]
		public OC_RelationshipPatternContext oC_RelationshipPattern()
		{
			OC_RelationshipPatternContext _localctx = new OC_RelationshipPatternContext(Context, State);
			EnterRule(_localctx, 82, RULE_oC_RelationshipPattern);
			int _la;
			try
			{
				State = 796;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 124, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 732;
								oC_LeftArrowHead();
								State = 734;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 733;
										Match(SP);
									}
								}

								State = 736;
								oC_Dash();
								State = 738;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 109, Context))
								{
									case 1:
										{
											State = 737;
											Match(SP);
										}
										break;
								}
								State = 741;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == T__7)
								{
									{
										State = 740;
										oC_RelationshipDetail();
									}
								}

								State = 744;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 743;
										Match(SP);
									}
								}

								State = 746;
								oC_Dash();
								State = 748;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 747;
										Match(SP);
									}
								}

								State = 750;
								oC_RightArrowHead();
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 752;
								oC_LeftArrowHead();
								State = 754;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 753;
										Match(SP);
									}
								}

								State = 756;
								oC_Dash();
								State = 758;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 114, Context))
								{
									case 1:
										{
											State = 757;
											Match(SP);
										}
										break;
								}
								State = 761;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == T__7)
								{
									{
										State = 760;
										oC_RelationshipDetail();
									}
								}

								State = 764;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 763;
										Match(SP);
									}
								}

								State = 766;
								oC_Dash();
							}
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							{
								State = 768;
								oC_Dash();
								State = 770;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 117, Context))
								{
									case 1:
										{
											State = 769;
											Match(SP);
										}
										break;
								}
								State = 773;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == T__7)
								{
									{
										State = 772;
										oC_RelationshipDetail();
									}
								}

								State = 776;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 775;
										Match(SP);
									}
								}

								State = 778;
								oC_Dash();
								State = 780;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 779;
										Match(SP);
									}
								}

								State = 782;
								oC_RightArrowHead();
							}
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							{
								State = 784;
								oC_Dash();
								State = 786;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 121, Context))
								{
									case 1:
										{
											State = 785;
											Match(SP);
										}
										break;
								}
								State = 789;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == T__7)
								{
									{
										State = 788;
										oC_RelationshipDetail();
									}
								}

								State = 792;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 791;
										Match(SP);
									}
								}

								State = 794;
								oC_Dash();
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RelationshipDetailContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelationshipTypesContext oC_RelationshipTypes()
			{
				return GetRuleContext<OC_RelationshipTypesContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RangeLiteralContext oC_RangeLiteral()
			{
				return GetRuleContext<OC_RangeLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertiesContext oC_Properties()
			{
				return GetRuleContext<OC_PropertiesContext>(0);
			}
			public OC_RelationshipDetailContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RelationshipDetail; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RelationshipDetail(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RelationshipDetail(this);
			}
		}

		[RuleVersion(0)]
		public OC_RelationshipDetailContext oC_RelationshipDetail()
		{
			OC_RelationshipDetailContext _localctx = new OC_RelationshipDetailContext(Context, State);
			EnterRule(_localctx, 84, RULE_oC_RelationshipDetail);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 798;
					Match(T__7);
					State = 800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 799;
							Match(SP);
						}
					}

					State = 806;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 2680059625921L) != 0)
					{
						{
							State = 802;
							oC_Variable();
							State = 804;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 803;
									Match(SP);
								}
							}

						}
					}

					State = 812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__9)
					{
						{
							State = 808;
							oC_RelationshipTypes();
							State = 810;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 809;
									Match(SP);
								}
							}

						}
					}

					State = 815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__4)
					{
						{
							State = 814;
							oC_RangeLiteral();
						}
					}

					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__23 || _la == T__25)
					{
						{
							State = 817;
							oC_Properties();
							State = 819;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 818;
									Match(SP);
								}
							}

						}
					}

					State = 823;
					Match(T__8);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PropertiesContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MapLiteralContext oC_MapLiteral()
			{
				return GetRuleContext<OC_MapLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ParameterContext oC_Parameter()
			{
				return GetRuleContext<OC_ParameterContext>(0);
			}
			public OC_PropertiesContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Properties; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Properties(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Properties(this);
			}
		}

		[RuleVersion(0)]
		public OC_PropertiesContext oC_Properties()
		{
			OC_PropertiesContext _localctx = new OC_PropertiesContext(Context, State);
			EnterRule(_localctx, 86, RULE_oC_Properties);
			try
			{
				State = 827;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case T__23:
						EnterOuterAlt(_localctx, 1);
						{
							State = 825;
							oC_MapLiteral();
						}
						break;
					case T__25:
						EnterOuterAlt(_localctx, 2);
						{
							State = 826;
							oC_Parameter();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RelationshipTypesContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelTypeNameContext[] oC_RelTypeName()
			{
				return GetRuleContexts<OC_RelTypeNameContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelTypeNameContext oC_RelTypeName(int i)
			{
				return GetRuleContext<OC_RelTypeNameContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_RelationshipTypesContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RelationshipTypes; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RelationshipTypes(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RelationshipTypes(this);
			}
		}

		[RuleVersion(0)]
		public OC_RelationshipTypesContext oC_RelationshipTypes()
		{
			OC_RelationshipTypesContext _localctx = new OC_RelationshipTypesContext(Context, State);
			EnterRule(_localctx, 88, RULE_oC_RelationshipTypes);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 829;
					Match(T__9);
					State = 831;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 830;
							Match(SP);
						}
					}

					State = 833;
					oC_RelTypeName();
					State = 847;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 138, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 835;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 834;
											Match(SP);
										}
									}

									State = 837;
									Match(T__10);
									State = 839;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == T__9)
									{
										{
											State = 838;
											Match(T__9);
										}
									}

									State = 842;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 841;
											Match(SP);
										}
									}

									State = 844;
									oC_RelTypeName();
								}
							}
						}
						State = 849;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 138, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NodeLabelsContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelContext[] oC_NodeLabel()
			{
				return GetRuleContexts<OC_NodeLabelContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelContext oC_NodeLabel(int i)
			{
				return GetRuleContext<OC_NodeLabelContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_NodeLabelsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NodeLabels; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NodeLabels(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NodeLabels(this);
			}
		}

		[RuleVersion(0)]
		public OC_NodeLabelsContext oC_NodeLabels()
		{
			OC_NodeLabelsContext _localctx = new OC_NodeLabelsContext(Context, State);
			EnterRule(_localctx, 90, RULE_oC_NodeLabels);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 850;
					oC_NodeLabel();
					State = 857;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 140, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 852;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 851;
											Match(SP);
										}
									}

									State = 854;
									oC_NodeLabel();
								}
							}
						}
						State = 859;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 140, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NodeLabelContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_LabelNameContext oC_LabelName()
			{
				return GetRuleContext<OC_LabelNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_NodeLabelContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NodeLabel; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NodeLabel(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NodeLabel(this);
			}
		}

		[RuleVersion(0)]
		public OC_NodeLabelContext oC_NodeLabel()
		{
			OC_NodeLabelContext _localctx = new OC_NodeLabelContext(Context, State);
			EnterRule(_localctx, 92, RULE_oC_NodeLabel);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 860;
					Match(T__9);
					State = 862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 861;
							Match(SP);
						}
					}

					State = 864;
					oC_LabelName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RangeLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_IntegerLiteralContext[] oC_IntegerLiteral()
			{
				return GetRuleContexts<OC_IntegerLiteralContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_IntegerLiteralContext oC_IntegerLiteral(int i)
			{
				return GetRuleContext<OC_IntegerLiteralContext>(i);
			}
			public OC_RangeLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RangeLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RangeLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RangeLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_RangeLiteralContext oC_RangeLiteral()
		{
			OC_RangeLiteralContext _localctx = new OC_RangeLiteralContext(Context, State);
			EnterRule(_localctx, 94, RULE_oC_RangeLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 866;
					Match(T__4);
					State = 868;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 867;
							Match(SP);
						}
					}

					State = 874;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 7L) != 0)
					{
						{
							State = 870;
							oC_IntegerLiteral();
							State = 872;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 871;
									Match(SP);
								}
							}

						}
					}

					State = 886;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == T__11)
					{
						{
							State = 876;
							Match(T__11);
							State = 878;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 877;
									Match(SP);
								}
							}

							State = 884;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 7L) != 0)
							{
								{
									State = 880;
									oC_IntegerLiteral();
									State = 882;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 881;
											Match(SP);
										}
									}

								}
							}

						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_LabelNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SchemaNameContext oC_SchemaName()
			{
				return GetRuleContext<OC_SchemaNameContext>(0);
			}
			public OC_LabelNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_LabelName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_LabelName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_LabelName(this);
			}
		}

		[RuleVersion(0)]
		public OC_LabelNameContext oC_LabelName()
		{
			OC_LabelNameContext _localctx = new OC_LabelNameContext(Context, State);
			EnterRule(_localctx, 96, RULE_oC_LabelName);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 888;
					oC_SchemaName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RelTypeNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SchemaNameContext oC_SchemaName()
			{
				return GetRuleContext<OC_SchemaNameContext>(0);
			}
			public OC_RelTypeNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RelTypeName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RelTypeName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RelTypeName(this);
			}
		}

		[RuleVersion(0)]
		public OC_RelTypeNameContext oC_RelTypeName()
		{
			OC_RelTypeNameContext _localctx = new OC_RelTypeNameContext(Context, State);
			EnterRule(_localctx, 98, RULE_oC_RelTypeName);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 890;
					oC_SchemaName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PropertyExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AtomContext oC_Atom()
			{
				return GetRuleContext<OC_AtomContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyLookupContext[] oC_PropertyLookup()
			{
				return GetRuleContexts<OC_PropertyLookupContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyLookupContext oC_PropertyLookup(int i)
			{
				return GetRuleContext<OC_PropertyLookupContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_PropertyExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PropertyExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PropertyExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PropertyExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_PropertyExpressionContext oC_PropertyExpression()
		{
			OC_PropertyExpressionContext _localctx = new OC_PropertyExpressionContext(Context, State);
			EnterRule(_localctx, 100, RULE_oC_PropertyExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 892;
					oC_Atom();
					State = 897;
					ErrorHandler.Sync(this);
					_alt = 1;
					do
					{
						switch (_alt)
						{
							case 1:
								{
									{
										State = 894;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 893;
												Match(SP);
											}
										}

										State = 896;
										oC_PropertyLookup();
									}
								}
								break;
							default:
								throw new NoViableAltException(this);
						}
						State = 899;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 150, Context);
					} while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_OrExpressionContext oC_OrExpression()
			{
				return GetRuleContext<OC_OrExpressionContext>(0);
			}
			public OC_ExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Expression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Expression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Expression(this);
			}
		}

		[RuleVersion(0)]
		public OC_ExpressionContext oC_Expression()
		{
			OC_ExpressionContext _localctx = new OC_ExpressionContext(Context, State);
			EnterRule(_localctx, 102, RULE_oC_Expression);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 901;
					oC_OrExpression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_OrExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_XorExpressionContext[] oC_XorExpression()
			{
				return GetRuleContexts<OC_XorExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_XorExpressionContext oC_XorExpression(int i)
			{
				return GetRuleContext<OC_XorExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(CypherParser.OR); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode OR(int i)
			{
				return GetToken(CypherParser.OR, i);
			}
			public OC_OrExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_OrExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_OrExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_OrExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_OrExpressionContext oC_OrExpression()
		{
			OC_OrExpressionContext _localctx = new OC_OrExpressionContext(Context, State);
			EnterRule(_localctx, 104, RULE_oC_OrExpression);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 903;
					oC_XorExpression();
					State = 910;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 151, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 904;
									Match(SP);
									State = 905;
									Match(OR);
									State = 906;
									Match(SP);
									State = 907;
									oC_XorExpression();
								}
							}
						}
						State = 912;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 151, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_XorExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AndExpressionContext[] oC_AndExpression()
			{
				return GetRuleContexts<OC_AndExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AndExpressionContext oC_AndExpression(int i)
			{
				return GetRuleContext<OC_AndExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(CypherParser.XOR); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode XOR(int i)
			{
				return GetToken(CypherParser.XOR, i);
			}
			public OC_XorExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_XorExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_XorExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_XorExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_XorExpressionContext oC_XorExpression()
		{
			OC_XorExpressionContext _localctx = new OC_XorExpressionContext(Context, State);
			EnterRule(_localctx, 106, RULE_oC_XorExpression);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 913;
					oC_AndExpression();
					State = 920;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 152, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 914;
									Match(SP);
									State = 915;
									Match(XOR);
									State = 916;
									Match(SP);
									State = 917;
									oC_AndExpression();
								}
							}
						}
						State = 922;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 152, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_AndExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NotExpressionContext[] oC_NotExpression()
			{
				return GetRuleContexts<OC_NotExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NotExpressionContext oC_NotExpression(int i)
			{
				return GetRuleContext<OC_NotExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(CypherParser.AND); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode AND(int i)
			{
				return GetToken(CypherParser.AND, i);
			}
			public OC_AndExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_AndExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_AndExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_AndExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_AndExpressionContext oC_AndExpression()
		{
			OC_AndExpressionContext _localctx = new OC_AndExpressionContext(Context, State);
			EnterRule(_localctx, 108, RULE_oC_AndExpression);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 923;
					oC_NotExpression();
					State = 930;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 153, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 924;
									Match(SP);
									State = 925;
									Match(AND);
									State = 926;
									Match(SP);
									State = 927;
									oC_NotExpression();
								}
							}
						}
						State = 932;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 153, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NotExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ComparisonExpressionContext oC_ComparisonExpression()
			{
				return GetRuleContext<OC_ComparisonExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(CypherParser.NOT); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode NOT(int i)
			{
				return GetToken(CypherParser.NOT, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_NotExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NotExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NotExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NotExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_NotExpressionContext oC_NotExpression()
		{
			OC_NotExpressionContext _localctx = new OC_NotExpressionContext(Context, State);
			EnterRule(_localctx, 110, RULE_oC_NotExpression);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 939;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == NOT)
					{
						{
							{
								State = 933;
								Match(NOT);
								State = 935;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 934;
										Match(SP);
									}
								}

							}
						}
						State = 941;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 942;
					oC_ComparisonExpression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ComparisonExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StringListNullPredicateExpressionContext oC_StringListNullPredicateExpression()
			{
				return GetRuleContext<OC_StringListNullPredicateExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PartialComparisonExpressionContext[] oC_PartialComparisonExpression()
			{
				return GetRuleContexts<OC_PartialComparisonExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PartialComparisonExpressionContext oC_PartialComparisonExpression(int i)
			{
				return GetRuleContext<OC_PartialComparisonExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ComparisonExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ComparisonExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ComparisonExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_ComparisonExpressionContext oC_ComparisonExpression()
		{
			OC_ComparisonExpressionContext _localctx = new OC_ComparisonExpressionContext(Context, State);
			EnterRule(_localctx, 112, RULE_oC_ComparisonExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 944;
					oC_StringListNullPredicateExpression();
					State = 951;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 157, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 946;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 945;
											Match(SP);
										}
									}

									State = 948;
									oC_PartialComparisonExpression();
								}
							}
						}
						State = 953;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 157, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PartialComparisonExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StringListNullPredicateExpressionContext oC_StringListNullPredicateExpression()
			{
				return GetRuleContext<OC_StringListNullPredicateExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_PartialComparisonExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PartialComparisonExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PartialComparisonExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PartialComparisonExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_PartialComparisonExpressionContext oC_PartialComparisonExpression()
		{
			OC_PartialComparisonExpressionContext _localctx = new OC_PartialComparisonExpressionContext(Context, State);
			EnterRule(_localctx, 114, RULE_oC_PartialComparisonExpression);
			int _la;
			try
			{
				State = 984;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case T__2:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 954;
								Match(T__2);
								State = 956;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 955;
										Match(SP);
									}
								}

								State = 958;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					case T__12:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 959;
								Match(T__12);
								State = 961;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 960;
										Match(SP);
									}
								}

								State = 963;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					case T__13:
						EnterOuterAlt(_localctx, 3);
						{
							{
								State = 964;
								Match(T__13);
								State = 966;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 965;
										Match(SP);
									}
								}

								State = 968;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					case T__14:
						EnterOuterAlt(_localctx, 4);
						{
							{
								State = 969;
								Match(T__14);
								State = 971;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 970;
										Match(SP);
									}
								}

								State = 973;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					case T__15:
						EnterOuterAlt(_localctx, 5);
						{
							{
								State = 974;
								Match(T__15);
								State = 976;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 975;
										Match(SP);
									}
								}

								State = 978;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					case T__16:
						EnterOuterAlt(_localctx, 6);
						{
							{
								State = 979;
								Match(T__16);
								State = 981;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 980;
										Match(SP);
									}
								}

								State = 983;
								oC_StringListNullPredicateExpression();
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_StringListNullPredicateExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AddOrSubtractExpressionContext oC_AddOrSubtractExpression()
			{
				return GetRuleContext<OC_AddOrSubtractExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StringPredicateExpressionContext[] oC_StringPredicateExpression()
			{
				return GetRuleContexts<OC_StringPredicateExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_StringPredicateExpressionContext oC_StringPredicateExpression(int i)
			{
				return GetRuleContext<OC_StringPredicateExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ListPredicateExpressionContext[] oC_ListPredicateExpression()
			{
				return GetRuleContexts<OC_ListPredicateExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ListPredicateExpressionContext oC_ListPredicateExpression(int i)
			{
				return GetRuleContext<OC_ListPredicateExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NullPredicateExpressionContext[] oC_NullPredicateExpression()
			{
				return GetRuleContexts<OC_NullPredicateExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NullPredicateExpressionContext oC_NullPredicateExpression(int i)
			{
				return GetRuleContext<OC_NullPredicateExpressionContext>(i);
			}
			public OC_StringListNullPredicateExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_StringListNullPredicateExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_StringListNullPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_StringListNullPredicateExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_StringListNullPredicateExpressionContext oC_StringListNullPredicateExpression()
		{
			OC_StringListNullPredicateExpressionContext _localctx = new OC_StringListNullPredicateExpressionContext(Context, State);
			EnterRule(_localctx, 116, RULE_oC_StringListNullPredicateExpression);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 986;
					oC_AddOrSubtractExpression();
					State = 992;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 166, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								State = 990;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 165, Context))
								{
									case 1:
										{
											State = 987;
											oC_StringPredicateExpression();
										}
										break;
									case 2:
										{
											State = 988;
											oC_ListPredicateExpression();
										}
										break;
									case 3:
										{
											State = 989;
											oC_NullPredicateExpression();
										}
										break;
								}
							}
						}
						State = 994;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 166, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_StringPredicateExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AddOrSubtractExpressionContext oC_AddOrSubtractExpression()
			{
				return GetRuleContext<OC_AddOrSubtractExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(CypherParser.STARTS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(CypherParser.WITH, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(CypherParser.ENDS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(CypherParser.CONTAINS, 0); }
			public OC_StringPredicateExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_StringPredicateExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_StringPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_StringPredicateExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_StringPredicateExpressionContext oC_StringPredicateExpression()
		{
			OC_StringPredicateExpressionContext _localctx = new OC_StringPredicateExpressionContext(Context, State);
			EnterRule(_localctx, 118, RULE_oC_StringPredicateExpression);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1005;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 167, Context))
					{
						case 1:
							{
								{
									State = 995;
									Match(SP);
									State = 996;
									Match(STARTS);
									State = 997;
									Match(SP);
									State = 998;
									Match(WITH);
								}
							}
							break;
						case 2:
							{
								{
									State = 999;
									Match(SP);
									State = 1000;
									Match(ENDS);
									State = 1001;
									Match(SP);
									State = 1002;
									Match(WITH);
								}
							}
							break;
						case 3:
							{
								{
									State = 1003;
									Match(SP);
									State = 1004;
									Match(CONTAINS);
								}
							}
							break;
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1007;
							Match(SP);
						}
					}

					State = 1010;
					oC_AddOrSubtractExpression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ListPredicateExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CypherParser.IN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AddOrSubtractExpressionContext oC_AddOrSubtractExpression()
			{
				return GetRuleContext<OC_AddOrSubtractExpressionContext>(0);
			}
			public OC_ListPredicateExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ListPredicateExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ListPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ListPredicateExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_ListPredicateExpressionContext oC_ListPredicateExpression()
		{
			OC_ListPredicateExpressionContext _localctx = new OC_ListPredicateExpressionContext(Context, State);
			EnterRule(_localctx, 120, RULE_oC_ListPredicateExpression);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1012;
					Match(SP);
					State = 1013;
					Match(IN);
					State = 1015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1014;
							Match(SP);
						}
					}

					State = 1017;
					oC_AddOrSubtractExpression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NullPredicateExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(CypherParser.IS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CypherParser.NULL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CypherParser.NOT, 0); }
			public OC_NullPredicateExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NullPredicateExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NullPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NullPredicateExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_NullPredicateExpressionContext oC_NullPredicateExpression()
		{
			OC_NullPredicateExpressionContext _localctx = new OC_NullPredicateExpressionContext(Context, State);
			EnterRule(_localctx, 122, RULE_oC_NullPredicateExpression);
			try
			{
				State = 1029;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 170, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 1019;
								Match(SP);
								State = 1020;
								Match(IS);
								State = 1021;
								Match(SP);
								State = 1022;
								Match(NULL);
							}
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 1023;
								Match(SP);
								State = 1024;
								Match(IS);
								State = 1025;
								Match(SP);
								State = 1026;
								Match(NOT);
								State = 1027;
								Match(SP);
								State = 1028;
								Match(NULL);
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_AddOrSubtractExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MultiplyDivideModuloExpressionContext[] oC_MultiplyDivideModuloExpression()
			{
				return GetRuleContexts<OC_MultiplyDivideModuloExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MultiplyDivideModuloExpressionContext oC_MultiplyDivideModuloExpression(int i)
			{
				return GetRuleContext<OC_MultiplyDivideModuloExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_AddOrSubtractExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_AddOrSubtractExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_AddOrSubtractExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_AddOrSubtractExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_AddOrSubtractExpressionContext oC_AddOrSubtractExpression()
		{
			OC_AddOrSubtractExpressionContext _localctx = new OC_AddOrSubtractExpressionContext(Context, State);
			EnterRule(_localctx, 124, RULE_oC_AddOrSubtractExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1031;
					oC_MultiplyDivideModuloExpression();
					State = 1050;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 176, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								State = 1048;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 175, Context))
								{
									case 1:
										{
											{
												State = 1033;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1032;
														Match(SP);
													}
												}

												State = 1035;
												Match(T__17);
												State = 1037;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1036;
														Match(SP);
													}
												}

												State = 1039;
												oC_MultiplyDivideModuloExpression();
											}
										}
										break;
									case 2:
										{
											{
												State = 1041;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1040;
														Match(SP);
													}
												}

												State = 1043;
												Match(T__18);
												State = 1045;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1044;
														Match(SP);
													}
												}

												State = 1047;
												oC_MultiplyDivideModuloExpression();
											}
										}
										break;
								}
							}
						}
						State = 1052;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 176, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MultiplyDivideModuloExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PowerOfExpressionContext[] oC_PowerOfExpression()
			{
				return GetRuleContexts<OC_PowerOfExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PowerOfExpressionContext oC_PowerOfExpression(int i)
			{
				return GetRuleContext<OC_PowerOfExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_MultiplyDivideModuloExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_MultiplyDivideModuloExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_MultiplyDivideModuloExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_MultiplyDivideModuloExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_MultiplyDivideModuloExpressionContext oC_MultiplyDivideModuloExpression()
		{
			OC_MultiplyDivideModuloExpressionContext _localctx = new OC_MultiplyDivideModuloExpressionContext(Context, State);
			EnterRule(_localctx, 126, RULE_oC_MultiplyDivideModuloExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1053;
					oC_PowerOfExpression();
					State = 1080;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 184, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								State = 1078;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 183, Context))
								{
									case 1:
										{
											{
												State = 1055;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1054;
														Match(SP);
													}
												}

												State = 1057;
												Match(T__4);
												State = 1059;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1058;
														Match(SP);
													}
												}

												State = 1061;
												oC_PowerOfExpression();
											}
										}
										break;
									case 2:
										{
											{
												State = 1063;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1062;
														Match(SP);
													}
												}

												State = 1065;
												Match(T__19);
												State = 1067;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1066;
														Match(SP);
													}
												}

												State = 1069;
												oC_PowerOfExpression();
											}
										}
										break;
									case 3:
										{
											{
												State = 1071;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1070;
														Match(SP);
													}
												}

												State = 1073;
												Match(T__20);
												State = 1075;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1074;
														Match(SP);
													}
												}

												State = 1077;
												oC_PowerOfExpression();
											}
										}
										break;
								}
							}
						}
						State = 1082;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 184, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PowerOfExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UnaryAddOrSubtractExpressionContext[] oC_UnaryAddOrSubtractExpression()
			{
				return GetRuleContexts<OC_UnaryAddOrSubtractExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_UnaryAddOrSubtractExpressionContext oC_UnaryAddOrSubtractExpression(int i)
			{
				return GetRuleContext<OC_UnaryAddOrSubtractExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_PowerOfExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PowerOfExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PowerOfExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PowerOfExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_PowerOfExpressionContext oC_PowerOfExpression()
		{
			OC_PowerOfExpressionContext _localctx = new OC_PowerOfExpressionContext(Context, State);
			EnterRule(_localctx, 128, RULE_oC_PowerOfExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1083;
					oC_UnaryAddOrSubtractExpression();
					State = 1094;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 187, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 1085;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 1084;
											Match(SP);
										}
									}

									State = 1087;
									Match(T__21);
									State = 1089;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 1088;
											Match(SP);
										}
									}

									State = 1091;
									oC_UnaryAddOrSubtractExpression();
								}
							}
						}
						State = 1096;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 187, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_UnaryAddOrSubtractExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ListOperatorExpressionContext oC_ListOperatorExpression()
			{
				return GetRuleContext<OC_ListOperatorExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_UnaryAddOrSubtractExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_UnaryAddOrSubtractExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_UnaryAddOrSubtractExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_UnaryAddOrSubtractExpressionContext oC_UnaryAddOrSubtractExpression()
		{
			OC_UnaryAddOrSubtractExpressionContext _localctx = new OC_UnaryAddOrSubtractExpressionContext(Context, State);
			EnterRule(_localctx, 130, RULE_oC_UnaryAddOrSubtractExpression);
			int _la;
			try
			{
				State = 1103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case T__5:
					case T__7:
					case T__23:
					case T__25:
					case ALL:
					case NULL:
					case COUNT:
					case CASE:
					case ANY:
					case NONE:
					case SINGLE:
					case EXISTS:
					case TRUE:
					case FALSE:
					case HexInteger:
					case DecimalInteger:
					case OctalInteger:
					case HexLetter:
					case ExponentDecimalReal:
					case RegularDecimalReal:
					case StringLiteral:
					case FILTER:
					case EXTRACT:
					case UnescapedSymbolicName:
					case EscapedSymbolicName:
						EnterOuterAlt(_localctx, 1);
						{
							State = 1097;
							oC_ListOperatorExpression();
						}
						break;
					case T__17:
					case T__18:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 1098;
								_la = TokenStream.LA(1);
								if (!(_la == T__17 || _la == T__18))
								{
									ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 1100;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1099;
										Match(SP);
									}
								}

								State = 1102;
								oC_ListOperatorExpression();
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ListOperatorExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyOrLabelsExpressionContext oC_PropertyOrLabelsExpression()
			{
				return GetRuleContext<OC_PropertyOrLabelsExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_ListOperatorExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ListOperatorExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ListOperatorExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ListOperatorExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_ListOperatorExpressionContext oC_ListOperatorExpression()
		{
			OC_ListOperatorExpressionContext _localctx = new OC_ListOperatorExpressionContext(Context, State);
			EnterRule(_localctx, 132, RULE_oC_ListOperatorExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1105;
					oC_PropertyOrLabelsExpression();
					State = 1127;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 195, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								State = 1125;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 194, Context))
								{
									case 1:
										{
											{
												State = 1107;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1106;
														Match(SP);
													}
												}

												State = 1109;
												Match(T__7);
												State = 1110;
												oC_Expression();
												State = 1111;
												Match(T__8);
											}
										}
										break;
									case 2:
										{
											{
												State = 1114;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1113;
														Match(SP);
													}
												}

												State = 1116;
												Match(T__7);
												State = 1118;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (((_la) & ~0x3f) == 0 && ((1L << _la) & 140737573028160L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 343051394343361L) != 0)
												{
													{
														State = 1117;
														oC_Expression();
													}
												}

												State = 1120;
												Match(T__11);
												State = 1122;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (((_la) & ~0x3f) == 0 && ((1L << _la) & 140737573028160L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 343051394343361L) != 0)
												{
													{
														State = 1121;
														oC_Expression();
													}
												}

												State = 1124;
												Match(T__8);
											}
										}
										break;
								}
							}
						}
						State = 1129;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 195, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PropertyOrLabelsExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_AtomContext oC_Atom()
			{
				return GetRuleContext<OC_AtomContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyLookupContext[] oC_PropertyLookup()
			{
				return GetRuleContexts<OC_PropertyLookupContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyLookupContext oC_PropertyLookup(int i)
			{
				return GetRuleContext<OC_PropertyLookupContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NodeLabelsContext oC_NodeLabels()
			{
				return GetRuleContext<OC_NodeLabelsContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_PropertyOrLabelsExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PropertyOrLabelsExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PropertyOrLabelsExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PropertyOrLabelsExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_PropertyOrLabelsExpressionContext oC_PropertyOrLabelsExpression()
		{
			OC_PropertyOrLabelsExpressionContext _localctx = new OC_PropertyOrLabelsExpressionContext(Context, State);
			EnterRule(_localctx, 134, RULE_oC_PropertyOrLabelsExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1130;
					oC_Atom();
					State = 1137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 197, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 1132;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 1131;
											Match(SP);
										}
									}

									State = 1134;
									oC_PropertyLookup();
								}
							}
						}
						State = 1139;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 197, Context);
					}
					State = 1144;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 199, Context))
					{
						case 1:
							{
								State = 1141;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1140;
										Match(SP);
									}
								}

								State = 1143;
								oC_NodeLabels();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PropertyLookupContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyKeyNameContext oC_PropertyKeyName()
			{
				return GetRuleContext<OC_PropertyKeyNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_PropertyLookupContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PropertyLookup; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PropertyLookup(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PropertyLookup(this);
			}
		}

		[RuleVersion(0)]
		public OC_PropertyLookupContext oC_PropertyLookup()
		{
			OC_PropertyLookupContext _localctx = new OC_PropertyLookupContext(Context, State);
			EnterRule(_localctx, 136, RULE_oC_PropertyLookup);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1146;
					Match(T__22);
					State = 1148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1147;
							Match(SP);
						}
					}

					{
						State = 1150;
						oC_PropertyKeyName();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_AtomContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_LiteralContext oC_Literal()
			{
				return GetRuleContext<OC_LiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ParameterContext oC_Parameter()
			{
				return GetRuleContext<OC_ParameterContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_CaseExpressionContext oC_CaseExpression()
			{
				return GetRuleContext<OC_CaseExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(CypherParser.COUNT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ListComprehensionContext oC_ListComprehension()
			{
				return GetRuleContext<OC_ListComprehensionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternComprehensionContext oC_PatternComprehension()
			{
				return GetRuleContext<OC_PatternComprehensionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_QuantifierContext oC_Quantifier()
			{
				return GetRuleContext<OC_QuantifierContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternPredicateContext oC_PatternPredicate()
			{
				return GetRuleContext<OC_PatternPredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ParenthesizedExpressionContext oC_ParenthesizedExpression()
			{
				return GetRuleContext<OC_ParenthesizedExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_FunctionInvocationContext oC_FunctionInvocation()
			{
				return GetRuleContext<OC_FunctionInvocationContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExistentialSubqueryContext oC_ExistentialSubquery()
			{
				return GetRuleContext<OC_ExistentialSubqueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			public OC_AtomContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Atom; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Atom(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Atom(this);
			}
		}

		[RuleVersion(0)]
		public OC_AtomContext oC_Atom()
		{
			OC_AtomContext _localctx = new OC_AtomContext(Context, State);
			EnterRule(_localctx, 138, RULE_oC_Atom);
			int _la;
			try
			{
				State = 1176;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 204, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 1152;
							oC_Literal();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 1153;
							oC_Parameter();
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 1154;
							oC_CaseExpression();
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							{
								State = 1155;
								Match(COUNT);
								State = 1157;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1156;
										Match(SP);
									}
								}

								State = 1159;
								Match(T__5);
								State = 1161;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1160;
										Match(SP);
									}
								}

								State = 1163;
								Match(T__4);
								State = 1165;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1164;
										Match(SP);
									}
								}

								State = 1167;
								Match(T__6);
							}
						}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 1168;
							oC_ListComprehension();
						}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
						{
							State = 1169;
							oC_PatternComprehension();
						}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
						{
							State = 1170;
							oC_Quantifier();
						}
						break;
					case 8:
						EnterOuterAlt(_localctx, 8);
						{
							State = 1171;
							oC_PatternPredicate();
						}
						break;
					case 9:
						EnterOuterAlt(_localctx, 9);
						{
							State = 1172;
							oC_ParenthesizedExpression();
						}
						break;
					case 10:
						EnterOuterAlt(_localctx, 10);
						{
							State = 1173;
							oC_FunctionInvocation();
						}
						break;
					case 11:
						EnterOuterAlt(_localctx, 11);
						{
							State = 1174;
							oC_ExistentialSubquery();
						}
						break;
					case 12:
						EnterOuterAlt(_localctx, 12);
						{
							State = 1175;
							oC_Variable();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_CaseExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CypherParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CypherParser.ELSE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CypherParser.CASE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_CaseAlternativeContext[] oC_CaseAlternative()
			{
				return GetRuleContexts<OC_CaseAlternativeContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_CaseAlternativeContext oC_CaseAlternative(int i)
			{
				return GetRuleContext<OC_CaseAlternativeContext>(i);
			}
			public OC_CaseExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_CaseExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_CaseExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_CaseExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_CaseExpressionContext oC_CaseExpression()
		{
			OC_CaseExpressionContext _localctx = new OC_CaseExpressionContext(Context, State);
			EnterRule(_localctx, 140, RULE_oC_CaseExpression);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1200;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 210, Context))
					{
						case 1:
							{
								{
									State = 1178;
									Match(CASE);
									State = 1183;
									ErrorHandler.Sync(this);
									_alt = 1;
									do
									{
										switch (_alt)
										{
											case 1:
												{
													{
														State = 1180;
														ErrorHandler.Sync(this);
														_la = TokenStream.LA(1);
														if (_la == SP)
														{
															{
																State = 1179;
																Match(SP);
															}
														}

														State = 1182;
														oC_CaseAlternative();
													}
												}
												break;
											default:
												throw new NoViableAltException(this);
										}
										State = 1185;
										ErrorHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(TokenStream, 206, Context);
									} while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
								}
							}
							break;
						case 2:
							{
								{
									State = 1187;
									Match(CASE);
									State = 1189;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la == SP)
									{
										{
											State = 1188;
											Match(SP);
										}
									}

									State = 1191;
									oC_Expression();
									State = 1196;
									ErrorHandler.Sync(this);
									_alt = 1;
									do
									{
										switch (_alt)
										{
											case 1:
												{
													{
														State = 1193;
														ErrorHandler.Sync(this);
														_la = TokenStream.LA(1);
														if (_la == SP)
														{
															{
																State = 1192;
																Match(SP);
															}
														}

														State = 1195;
														oC_CaseAlternative();
													}
												}
												break;
											default:
												throw new NoViableAltException(this);
										}
										State = 1198;
										ErrorHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(TokenStream, 209, Context);
									} while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
								}
							}
							break;
					}
					State = 1210;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 213, Context))
					{
						case 1:
							{
								State = 1203;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1202;
										Match(SP);
									}
								}

								State = 1205;
								Match(ELSE);
								State = 1207;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1206;
										Match(SP);
									}
								}

								State = 1209;
								oC_Expression();
							}
							break;
					}
					State = 1213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1212;
							Match(SP);
						}
					}

					State = 1215;
					Match(END);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_CaseAlternativeContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(CypherParser.WHEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CypherParser.THEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_CaseAlternativeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_CaseAlternative; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_CaseAlternative(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_CaseAlternative(this);
			}
		}

		[RuleVersion(0)]
		public OC_CaseAlternativeContext oC_CaseAlternative()
		{
			OC_CaseAlternativeContext _localctx = new OC_CaseAlternativeContext(Context, State);
			EnterRule(_localctx, 142, RULE_oC_CaseAlternative);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1217;
					Match(WHEN);
					State = 1219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1218;
							Match(SP);
						}
					}

					State = 1221;
					oC_Expression();
					State = 1223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1222;
							Match(SP);
						}
					}

					State = 1225;
					Match(THEN);
					State = 1227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1226;
							Match(SP);
						}
					}

					State = 1229;
					oC_Expression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ListComprehensionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_FilterExpressionContext oC_FilterExpression()
			{
				return GetRuleContext<OC_FilterExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			public OC_ListComprehensionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ListComprehension; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ListComprehension(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ListComprehension(this);
			}
		}

		[RuleVersion(0)]
		public OC_ListComprehensionContext oC_ListComprehension()
		{
			OC_ListComprehensionContext _localctx = new OC_ListComprehensionContext(Context, State);
			EnterRule(_localctx, 144, RULE_oC_ListComprehension);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1231;
					Match(T__7);
					State = 1233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1232;
							Match(SP);
						}
					}

					State = 1235;
					oC_FilterExpression();
					State = 1244;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 221, Context))
					{
						case 1:
							{
								State = 1237;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1236;
										Match(SP);
									}
								}

								State = 1239;
								Match(T__10);
								State = 1241;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1240;
										Match(SP);
									}
								}

								State = 1243;
								oC_Expression();
							}
							break;
					}
					State = 1247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1246;
							Match(SP);
						}
					}

					State = 1249;
					Match(T__8);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternComprehensionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelationshipsPatternContext oC_RelationshipsPattern()
			{
				return GetRuleContext<OC_RelationshipsPatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			public OC_PatternComprehensionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PatternComprehension; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PatternComprehension(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PatternComprehension(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternComprehensionContext oC_PatternComprehension()
		{
			OC_PatternComprehensionContext _localctx = new OC_PatternComprehensionContext(Context, State);
			EnterRule(_localctx, 146, RULE_oC_PatternComprehension);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1251;
					Match(T__7);
					State = 1253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1252;
							Match(SP);
						}
					}

					State = 1263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 2680059625921L) != 0)
					{
						{
							State = 1255;
							oC_Variable();
							State = 1257;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1256;
									Match(SP);
								}
							}

							State = 1259;
							Match(T__2);
							State = 1261;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1260;
									Match(SP);
								}
							}

						}
					}

					State = 1265;
					oC_RelationshipsPattern();
					State = 1267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1266;
							Match(SP);
						}
					}

					State = 1273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == WHERE)
					{
						{
							State = 1269;
							oC_Where();
							State = 1271;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1270;
									Match(SP);
								}
							}

						}
					}

					State = 1275;
					Match(T__10);
					State = 1277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1276;
							Match(SP);
						}
					}

					State = 1279;
					oC_Expression();
					State = 1281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1280;
							Match(SP);
						}
					}

					State = 1283;
					Match(T__8);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_QuantifierContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(CypherParser.ALL, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_FilterExpressionContext oC_FilterExpression()
			{
				return GetRuleContext<OC_FilterExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(CypherParser.ANY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(CypherParser.NONE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE() { return GetToken(CypherParser.SINGLE, 0); }
			public OC_QuantifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Quantifier; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Quantifier(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Quantifier(this);
			}
		}

		[RuleVersion(0)]
		public OC_QuantifierContext oC_Quantifier()
		{
			OC_QuantifierContext _localctx = new OC_QuantifierContext(Context, State);
			EnterRule(_localctx, 148, RULE_oC_Quantifier);
			int _la;
			try
			{
				State = 1341;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case ALL:
						EnterOuterAlt(_localctx, 1);
						{
							{
								State = 1285;
								Match(ALL);
								State = 1287;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1286;
										Match(SP);
									}
								}

								State = 1289;
								Match(T__5);
								State = 1291;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1290;
										Match(SP);
									}
								}

								State = 1293;
								oC_FilterExpression();
								State = 1295;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1294;
										Match(SP);
									}
								}

								State = 1297;
								Match(T__6);
							}
						}
						break;
					case ANY:
						EnterOuterAlt(_localctx, 2);
						{
							{
								State = 1299;
								Match(ANY);
								State = 1301;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1300;
										Match(SP);
									}
								}

								State = 1303;
								Match(T__5);
								State = 1305;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1304;
										Match(SP);
									}
								}

								State = 1307;
								oC_FilterExpression();
								State = 1309;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1308;
										Match(SP);
									}
								}

								State = 1311;
								Match(T__6);
							}
						}
						break;
					case NONE:
						EnterOuterAlt(_localctx, 3);
						{
							{
								State = 1313;
								Match(NONE);
								State = 1315;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1314;
										Match(SP);
									}
								}

								State = 1317;
								Match(T__5);
								State = 1319;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1318;
										Match(SP);
									}
								}

								State = 1321;
								oC_FilterExpression();
								State = 1323;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1322;
										Match(SP);
									}
								}

								State = 1325;
								Match(T__6);
							}
						}
						break;
					case SINGLE:
						EnterOuterAlt(_localctx, 4);
						{
							{
								State = 1327;
								Match(SINGLE);
								State = 1329;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1328;
										Match(SP);
									}
								}

								State = 1331;
								Match(T__5);
								State = 1333;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1332;
										Match(SP);
									}
								}

								State = 1335;
								oC_FilterExpression();
								State = 1337;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1336;
										Match(SP);
									}
								}

								State = 1339;
								Match(T__6);
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_FilterExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_IdInCollContext oC_IdInColl()
			{
				return GetRuleContext<OC_IdInCollContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(CypherParser.SP, 0); }
			public OC_FilterExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_FilterExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_FilterExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_FilterExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_FilterExpressionContext oC_FilterExpression()
		{
			OC_FilterExpressionContext _localctx = new OC_FilterExpressionContext(Context, State);
			EnterRule(_localctx, 150, RULE_oC_FilterExpression);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1343;
					oC_IdInColl();
					State = 1348;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 246, Context))
					{
						case 1:
							{
								State = 1345;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == SP)
								{
									{
										State = 1344;
										Match(SP);
									}
								}

								State = 1347;
								oC_Where();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PatternPredicateContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RelationshipsPatternContext oC_RelationshipsPattern()
			{
				return GetRuleContext<OC_RelationshipsPatternContext>(0);
			}
			public OC_PatternPredicateContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PatternPredicate; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PatternPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PatternPredicate(this);
			}
		}

		[RuleVersion(0)]
		public OC_PatternPredicateContext oC_PatternPredicate()
		{
			OC_PatternPredicateContext _localctx = new OC_PatternPredicateContext(Context, State);
			EnterRule(_localctx, 152, RULE_oC_PatternPredicate);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1350;
					oC_RelationshipsPattern();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ParenthesizedExpressionContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			public OC_ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ParenthesizedExpression; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ParenthesizedExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ParenthesizedExpression(this);
			}
		}

		[RuleVersion(0)]
		public OC_ParenthesizedExpressionContext oC_ParenthesizedExpression()
		{
			OC_ParenthesizedExpressionContext _localctx = new OC_ParenthesizedExpressionContext(Context, State);
			EnterRule(_localctx, 154, RULE_oC_ParenthesizedExpression);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1352;
					Match(T__5);
					State = 1354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1353;
							Match(SP);
						}
					}

					State = 1356;
					oC_Expression();
					State = 1358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1357;
							Match(SP);
						}
					}

					State = 1360;
					Match(T__6);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_IdInCollContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_VariableContext oC_Variable()
			{
				return GetRuleContext<OC_VariableContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CypherParser.IN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression()
			{
				return GetRuleContext<OC_ExpressionContext>(0);
			}
			public OC_IdInCollContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_IdInColl; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_IdInColl(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_IdInColl(this);
			}
		}

		[RuleVersion(0)]
		public OC_IdInCollContext oC_IdInColl()
		{
			OC_IdInCollContext _localctx = new OC_IdInCollContext(Context, State);
			EnterRule(_localctx, 156, RULE_oC_IdInColl);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1362;
					oC_Variable();
					State = 1363;
					Match(SP);
					State = 1364;
					Match(IN);
					State = 1365;
					Match(SP);
					State = 1366;
					oC_Expression();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_FunctionInvocationContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_FunctionNameContext oC_FunctionName()
			{
				return GetRuleContext<OC_FunctionNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(CypherParser.DISTINCT, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			public OC_FunctionInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_FunctionInvocation; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_FunctionInvocation(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_FunctionInvocation(this);
			}
		}

		[RuleVersion(0)]
		public OC_FunctionInvocationContext oC_FunctionInvocation()
		{
			OC_FunctionInvocationContext _localctx = new OC_FunctionInvocationContext(Context, State);
			EnterRule(_localctx, 158, RULE_oC_FunctionInvocation);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1368;
					oC_FunctionName();
					State = 1370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1369;
							Match(SP);
						}
					}

					State = 1372;
					Match(T__5);
					State = 1374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1373;
							Match(SP);
						}
					}

					State = 1380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == DISTINCT)
					{
						{
							State = 1376;
							Match(DISTINCT);
							State = 1378;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1377;
									Match(SP);
								}
							}

						}
					}

					State = 1399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 140737573028160L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 343051394343361L) != 0)
					{
						{
							State = 1382;
							oC_Expression();
							State = 1384;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1383;
									Match(SP);
								}
							}

							State = 1396;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == T__1)
							{
								{
									{
										State = 1386;
										Match(T__1);
										State = 1388;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1387;
												Match(SP);
											}
										}

										State = 1390;
										oC_Expression();
										State = 1392;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1391;
												Match(SP);
											}
										}

									}
								}
								State = 1398;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 1401;
					Match(T__6);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_FunctionNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NamespaceContext oC_Namespace()
			{
				return GetRuleContext<OC_NamespaceContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			public OC_FunctionNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_FunctionName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_FunctionName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_FunctionName(this);
			}
		}

		[RuleVersion(0)]
		public OC_FunctionNameContext oC_FunctionName()
		{
			OC_FunctionNameContext _localctx = new OC_FunctionNameContext(Context, State);
			EnterRule(_localctx, 160, RULE_oC_FunctionName);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1403;
					oC_Namespace();
					State = 1404;
					oC_SymbolicName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ExistentialSubqueryContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(CypherParser.EXISTS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_RegularQueryContext oC_RegularQuery()
			{
				return GetRuleContext<OC_RegularQueryContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PatternContext oC_Pattern()
			{
				return GetRuleContext<OC_PatternContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_WhereContext oC_Where()
			{
				return GetRuleContext<OC_WhereContext>(0);
			}
			public OC_ExistentialSubqueryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ExistentialSubquery; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ExistentialSubquery(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ExistentialSubquery(this);
			}
		}

		[RuleVersion(0)]
		public OC_ExistentialSubqueryContext oC_ExistentialSubquery()
		{
			OC_ExistentialSubqueryContext _localctx = new OC_ExistentialSubqueryContext(Context, State);
			EnterRule(_localctx, 162, RULE_oC_ExistentialSubquery);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1406;
					Match(EXISTS);
					State = 1408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1407;
							Match(SP);
						}
					}

					State = 1410;
					Match(T__23);
					State = 1412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1411;
							Match(SP);
						}
					}

					State = 1422;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1))
					{
						case OPTIONAL:
						case MATCH:
						case UNWIND:
						case MERGE:
						case CREATE:
						case SET:
						case DETACH:
						case DELETE:
						case REMOVE:
						case CALL:
						case WITH:
						case RETURN:
							{
								State = 1414;
								oC_RegularQuery();
							}
							break;
						case T__5:
						case COUNT:
						case ANY:
						case NONE:
						case SINGLE:
						case HexLetter:
						case FILTER:
						case EXTRACT:
						case UnescapedSymbolicName:
						case EscapedSymbolicName:
							{
								{
									State = 1415;
									oC_Pattern();
									State = 1420;
									ErrorHandler.Sync(this);
									switch (Interpreter.AdaptivePredict(TokenStream, 261, Context))
									{
										case 1:
											{
												State = 1417;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
												if (_la == SP)
												{
													{
														State = 1416;
														Match(SP);
													}
												}

												State = 1419;
												oC_Where();
											}
											break;
									}
								}
							}
							break;
						default:
							throw new NoViableAltException(this);
					}
					State = 1425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1424;
							Match(SP);
						}
					}

					State = 1427;
					Match(T__24);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ExplicitProcedureInvocationContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProcedureNameContext oC_ProcedureName()
			{
				return GetRuleContext<OC_ProcedureNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			public OC_ExplicitProcedureInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ExplicitProcedureInvocation; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ExplicitProcedureInvocation(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ExplicitProcedureInvocation(this);
			}
		}

		[RuleVersion(0)]
		public OC_ExplicitProcedureInvocationContext oC_ExplicitProcedureInvocation()
		{
			OC_ExplicitProcedureInvocationContext _localctx = new OC_ExplicitProcedureInvocationContext(Context, State);
			EnterRule(_localctx, 164, RULE_oC_ExplicitProcedureInvocation);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1429;
					oC_ProcedureName();
					State = 1431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1430;
							Match(SP);
						}
					}

					State = 1433;
					Match(T__5);
					State = 1435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1434;
							Match(SP);
						}
					}

					State = 1454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 140737573028160L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 343051394343361L) != 0)
					{
						{
							State = 1437;
							oC_Expression();
							State = 1439;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1438;
									Match(SP);
								}
							}

							State = 1451;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == T__1)
							{
								{
									{
										State = 1441;
										Match(T__1);
										State = 1443;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1442;
												Match(SP);
											}
										}

										State = 1445;
										oC_Expression();
										State = 1447;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1446;
												Match(SP);
											}
										}

									}
								}
								State = 1453;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 1456;
					Match(T__6);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ImplicitProcedureInvocationContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ProcedureNameContext oC_ProcedureName()
			{
				return GetRuleContext<OC_ProcedureNameContext>(0);
			}
			public OC_ImplicitProcedureInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ImplicitProcedureInvocation; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ImplicitProcedureInvocation(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ImplicitProcedureInvocation(this);
			}
		}

		[RuleVersion(0)]
		public OC_ImplicitProcedureInvocationContext oC_ImplicitProcedureInvocation()
		{
			OC_ImplicitProcedureInvocationContext _localctx = new OC_ImplicitProcedureInvocationContext(Context, State);
			EnterRule(_localctx, 166, RULE_oC_ImplicitProcedureInvocation);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1458;
					oC_ProcedureName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ProcedureResultFieldContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			public OC_ProcedureResultFieldContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ProcedureResultField; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ProcedureResultField(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ProcedureResultField(this);
			}
		}

		[RuleVersion(0)]
		public OC_ProcedureResultFieldContext oC_ProcedureResultField()
		{
			OC_ProcedureResultFieldContext _localctx = new OC_ProcedureResultFieldContext(Context, State);
			EnterRule(_localctx, 168, RULE_oC_ProcedureResultField);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1460;
					oC_SymbolicName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ProcedureNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NamespaceContext oC_Namespace()
			{
				return GetRuleContext<OC_NamespaceContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			public OC_ProcedureNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ProcedureName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ProcedureName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ProcedureName(this);
			}
		}

		[RuleVersion(0)]
		public OC_ProcedureNameContext oC_ProcedureName()
		{
			OC_ProcedureNameContext _localctx = new OC_ProcedureNameContext(Context, State);
			EnterRule(_localctx, 170, RULE_oC_ProcedureName);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1462;
					oC_Namespace();
					State = 1463;
					oC_SymbolicName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NamespaceContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext[] oC_SymbolicName()
			{
				return GetRuleContexts<OC_SymbolicNameContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName(int i)
			{
				return GetRuleContext<OC_SymbolicNameContext>(i);
			}
			public OC_NamespaceContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Namespace; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Namespace(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Namespace(this);
			}
		}

		[RuleVersion(0)]
		public OC_NamespaceContext oC_Namespace()
		{
			OC_NamespaceContext _localctx = new OC_NamespaceContext(Context, State);
			EnterRule(_localctx, 172, RULE_oC_Namespace);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 1470;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 271, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 1465;
									oC_SymbolicName();
									State = 1466;
									Match(T__22);
								}
							}
						}
						State = 1472;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 271, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_VariableContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			public OC_VariableContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Variable; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Variable(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Variable(this);
			}
		}

		[RuleVersion(0)]
		public OC_VariableContext oC_Variable()
		{
			OC_VariableContext _localctx = new OC_VariableContext(Context, State);
			EnterRule(_localctx, 174, RULE_oC_Variable);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1473;
					oC_SymbolicName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_LiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_BooleanLiteralContext oC_BooleanLiteral()
			{
				return GetRuleContext<OC_BooleanLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CypherParser.NULL, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_NumberLiteralContext oC_NumberLiteral()
			{
				return GetRuleContext<OC_NumberLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CypherParser.StringLiteral, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ListLiteralContext oC_ListLiteral()
			{
				return GetRuleContext<OC_ListLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_MapLiteralContext oC_MapLiteral()
			{
				return GetRuleContext<OC_MapLiteralContext>(0);
			}
			public OC_LiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Literal; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Literal(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Literal(this);
			}
		}

		[RuleVersion(0)]
		public OC_LiteralContext oC_Literal()
		{
			OC_LiteralContext _localctx = new OC_LiteralContext(Context, State);
			EnterRule(_localctx, 176, RULE_oC_Literal);
			try
			{
				State = 1481;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case TRUE:
					case FALSE:
						EnterOuterAlt(_localctx, 1);
						{
							State = 1475;
							oC_BooleanLiteral();
						}
						break;
					case NULL:
						EnterOuterAlt(_localctx, 2);
						{
							State = 1476;
							Match(NULL);
						}
						break;
					case HexInteger:
					case DecimalInteger:
					case OctalInteger:
					case ExponentDecimalReal:
					case RegularDecimalReal:
						EnterOuterAlt(_localctx, 3);
						{
							State = 1477;
							oC_NumberLiteral();
						}
						break;
					case StringLiteral:
						EnterOuterAlt(_localctx, 4);
						{
							State = 1478;
							Match(StringLiteral);
						}
						break;
					case T__7:
						EnterOuterAlt(_localctx, 5);
						{
							State = 1479;
							oC_ListLiteral();
						}
						break;
					case T__23:
						EnterOuterAlt(_localctx, 6);
						{
							State = 1480;
							oC_MapLiteral();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_BooleanLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CypherParser.TRUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CypherParser.FALSE, 0); }
			public OC_BooleanLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_BooleanLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_BooleanLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_BooleanLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_BooleanLiteralContext oC_BooleanLiteral()
		{
			OC_BooleanLiteralContext _localctx = new OC_BooleanLiteralContext(Context, State);
			EnterRule(_localctx, 178, RULE_oC_BooleanLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1483;
					_la = TokenStream.LA(1);
					if (!(_la == TRUE || _la == FALSE))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_NumberLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_DoubleLiteralContext oC_DoubleLiteral()
			{
				return GetRuleContext<OC_DoubleLiteralContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_IntegerLiteralContext oC_IntegerLiteral()
			{
				return GetRuleContext<OC_IntegerLiteralContext>(0);
			}
			public OC_NumberLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_NumberLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_NumberLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_NumberLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_NumberLiteralContext oC_NumberLiteral()
		{
			OC_NumberLiteralContext _localctx = new OC_NumberLiteralContext(Context, State);
			EnterRule(_localctx, 180, RULE_oC_NumberLiteral);
			try
			{
				State = 1487;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case ExponentDecimalReal:
					case RegularDecimalReal:
						EnterOuterAlt(_localctx, 1);
						{
							State = 1485;
							oC_DoubleLiteral();
						}
						break;
					case HexInteger:
					case DecimalInteger:
					case OctalInteger:
						EnterOuterAlt(_localctx, 2);
						{
							State = 1486;
							oC_IntegerLiteral();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_IntegerLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexInteger() { return GetToken(CypherParser.HexInteger, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalInteger() { return GetToken(CypherParser.OctalInteger, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalInteger() { return GetToken(CypherParser.DecimalInteger, 0); }
			public OC_IntegerLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_IntegerLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_IntegerLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_IntegerLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_IntegerLiteralContext oC_IntegerLiteral()
		{
			OC_IntegerLiteralContext _localctx = new OC_IntegerLiteralContext(Context, State);
			EnterRule(_localctx, 182, RULE_oC_IntegerLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1489;
					_la = TokenStream.LA(1);
					if (!((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 7L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_DoubleLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExponentDecimalReal() { return GetToken(CypherParser.ExponentDecimalReal, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularDecimalReal() { return GetToken(CypherParser.RegularDecimalReal, 0); }
			public OC_DoubleLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_DoubleLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_DoubleLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_DoubleLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_DoubleLiteralContext oC_DoubleLiteral()
		{
			OC_DoubleLiteralContext _localctx = new OC_DoubleLiteralContext(Context, State);
			EnterRule(_localctx, 184, RULE_oC_DoubleLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1491;
					_la = TokenStream.LA(1);
					if (!(_la == ExponentDecimalReal || _la == RegularDecimalReal))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ListLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			public OC_ListLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ListLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ListLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ListLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_ListLiteralContext oC_ListLiteral()
		{
			OC_ListLiteralContext _localctx = new OC_ListLiteralContext(Context, State);
			EnterRule(_localctx, 186, RULE_oC_ListLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1493;
					Match(T__7);
					State = 1495;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1494;
							Match(SP);
						}
					}

					State = 1514;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 140737573028160L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 343051394343361L) != 0)
					{
						{
							State = 1497;
							oC_Expression();
							State = 1499;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1498;
									Match(SP);
								}
							}

							State = 1511;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == T__1)
							{
								{
									{
										State = 1501;
										Match(T__1);
										State = 1503;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1502;
												Match(SP);
											}
										}

										State = 1505;
										oC_Expression();
										State = 1507;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1506;
												Match(SP);
											}
										}

									}
								}
								State = 1513;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 1516;
					Match(T__8);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_MapLiteralContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(CypherParser.SP); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SP(int i)
			{
				return GetToken(CypherParser.SP, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyKeyNameContext[] oC_PropertyKeyName()
			{
				return GetRuleContexts<OC_PropertyKeyNameContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_PropertyKeyNameContext oC_PropertyKeyName(int i)
			{
				return GetRuleContext<OC_PropertyKeyNameContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext[] oC_Expression()
			{
				return GetRuleContexts<OC_ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ExpressionContext oC_Expression(int i)
			{
				return GetRuleContext<OC_ExpressionContext>(i);
			}
			public OC_MapLiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_MapLiteral; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_MapLiteral(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_MapLiteral(this);
			}
		}

		[RuleVersion(0)]
		public OC_MapLiteralContext oC_MapLiteral()
		{
			OC_MapLiteralContext _localctx = new OC_MapLiteralContext(Context, State);
			EnterRule(_localctx, 188, RULE_oC_MapLiteral);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1518;
					Match(T__23);
					State = 1520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SP)
					{
						{
							State = 1519;
							Match(SP);
						}
					}

					State = 1555;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & -1729452625654448128L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1441116715713822719L) != 0)
					{
						{
							State = 1522;
							oC_PropertyKeyName();
							State = 1524;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1523;
									Match(SP);
								}
							}

							State = 1526;
							Match(T__9);
							State = 1528;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1527;
									Match(SP);
								}
							}

							State = 1530;
							oC_Expression();
							State = 1532;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == SP)
							{
								{
									State = 1531;
									Match(SP);
								}
							}

							State = 1552;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == T__1)
							{
								{
									{
										State = 1534;
										Match(T__1);
										State = 1536;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1535;
												Match(SP);
											}
										}

										State = 1538;
										oC_PropertyKeyName();
										State = 1540;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1539;
												Match(SP);
											}
										}

										State = 1542;
										Match(T__9);
										State = 1544;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1543;
												Match(SP);
											}
										}

										State = 1546;
										oC_Expression();
										State = 1548;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == SP)
										{
											{
												State = 1547;
												Match(SP);
											}
										}

									}
								}
								State = 1554;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 1557;
					Match(T__24);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_PropertyKeyNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SchemaNameContext oC_SchemaName()
			{
				return GetRuleContext<OC_SchemaNameContext>(0);
			}
			public OC_PropertyKeyNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_PropertyKeyName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_PropertyKeyName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_PropertyKeyName(this);
			}
		}

		[RuleVersion(0)]
		public OC_PropertyKeyNameContext oC_PropertyKeyName()
		{
			OC_PropertyKeyNameContext _localctx = new OC_PropertyKeyNameContext(Context, State);
			EnterRule(_localctx, 190, RULE_oC_PropertyKeyName);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1559;
					oC_SchemaName();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ParameterContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalInteger() { return GetToken(CypherParser.DecimalInteger, 0); }
			public OC_ParameterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Parameter; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Parameter(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Parameter(this);
			}
		}

		[RuleVersion(0)]
		public OC_ParameterContext oC_Parameter()
		{
			OC_ParameterContext _localctx = new OC_ParameterContext(Context, State);
			EnterRule(_localctx, 192, RULE_oC_Parameter);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1561;
					Match(T__25);
					State = 1564;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1))
					{
						case COUNT:
						case ANY:
						case NONE:
						case SINGLE:
						case HexLetter:
						case FILTER:
						case EXTRACT:
						case UnescapedSymbolicName:
						case EscapedSymbolicName:
							{
								State = 1562;
								oC_SymbolicName();
							}
							break;
						case DecimalInteger:
							{
								State = 1563;
								Match(DecimalInteger);
							}
							break;
						default:
							throw new NoViableAltException(this);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SchemaNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_SymbolicNameContext oC_SymbolicName()
			{
				return GetRuleContext<OC_SymbolicNameContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public OC_ReservedWordContext oC_ReservedWord()
			{
				return GetRuleContext<OC_ReservedWordContext>(0);
			}
			public OC_SchemaNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SchemaName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SchemaName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SchemaName(this);
			}
		}

		[RuleVersion(0)]
		public OC_SchemaNameContext oC_SchemaName()
		{
			OC_SchemaNameContext _localctx = new OC_SchemaNameContext(Context, State);
			EnterRule(_localctx, 194, RULE_oC_SchemaName);
			try
			{
				State = 1568;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case COUNT:
					case ANY:
					case NONE:
					case SINGLE:
					case HexLetter:
					case FILTER:
					case EXTRACT:
					case UnescapedSymbolicName:
					case EscapedSymbolicName:
						EnterOuterAlt(_localctx, 1);
						{
							State = 1566;
							oC_SymbolicName();
						}
						break;
					case UNION:
					case ALL:
					case OPTIONAL:
					case MATCH:
					case UNWIND:
					case AS:
					case MERGE:
					case ON:
					case CREATE:
					case SET:
					case DETACH:
					case DELETE:
					case REMOVE:
					case WITH:
					case RETURN:
					case DISTINCT:
					case ORDER:
					case BY:
					case L_SKIP:
					case LIMIT:
					case ASCENDING:
					case ASC:
					case DESCENDING:
					case DESC:
					case WHERE:
					case OR:
					case XOR:
					case AND:
					case NOT:
					case STARTS:
					case ENDS:
					case CONTAINS:
					case IN:
					case IS:
					case NULL:
					case CASE:
					case ELSE:
					case END:
					case WHEN:
					case THEN:
					case EXISTS:
					case TRUE:
					case FALSE:
					case CONSTRAINT:
					case DO:
					case FOR:
					case REQUIRE:
					case UNIQUE:
					case MANDATORY:
					case SCALAR:
					case OF:
					case ADD:
					case DROP:
						EnterOuterAlt(_localctx, 2);
						{
							State = 1567;
							oC_ReservedWord();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_ReservedWordContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(CypherParser.ALL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(CypherParser.ASC, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(CypherParser.ASCENDING, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(CypherParser.BY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(CypherParser.CREATE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(CypherParser.DELETE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(CypherParser.DESC, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(CypherParser.DESCENDING, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(CypherParser.DETACH, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(CypherParser.EXISTS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(CypherParser.LIMIT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(CypherParser.MATCH, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(CypherParser.MERGE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(CypherParser.ON, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(CypherParser.OPTIONAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(CypherParser.ORDER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(CypherParser.REMOVE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CypherParser.RETURN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CypherParser.SET, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_SKIP() { return GetToken(CypherParser.L_SKIP, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(CypherParser.WHERE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(CypherParser.WITH, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(CypherParser.UNION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNWIND() { return GetToken(CypherParser.UNWIND, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CypherParser.AND, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CypherParser.AS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(CypherParser.CONTAINS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(CypherParser.DISTINCT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(CypherParser.ENDS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CypherParser.IN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(CypherParser.IS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CypherParser.NOT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CypherParser.OR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(CypherParser.STARTS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(CypherParser.XOR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CypherParser.FALSE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CypherParser.TRUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CypherParser.NULL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(CypherParser.CONSTRAINT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CypherParser.DO, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CypherParser.FOR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(CypherParser.REQUIRE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(CypherParser.UNIQUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CypherParser.CASE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(CypherParser.WHEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CypherParser.THEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CypherParser.ELSE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CypherParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANDATORY() { return GetToken(CypherParser.MANDATORY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(CypherParser.SCALAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(CypherParser.OF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CypherParser.ADD, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(CypherParser.DROP, 0); }
			public OC_ReservedWordContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_ReservedWord; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_ReservedWord(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_ReservedWord(this);
			}
		}

		[RuleVersion(0)]
		public OC_ReservedWordContext oC_ReservedWord()
		{
			OC_ReservedWordContext _localctx = new OC_ReservedWordContext(Context, State);
			EnterRule(_localctx, 196, RULE_oC_ReservedWord);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1570;
					_la = TokenStream.LA(1);
					if (!(((_la) & ~0x3f) == 0 && ((1L << _la) & -1729452625654448128L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 35993614558953471L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_SymbolicNameContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnescapedSymbolicName() { return GetToken(CypherParser.UnescapedSymbolicName, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedSymbolicName() { return GetToken(CypherParser.EscapedSymbolicName, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLetter() { return GetToken(CypherParser.HexLetter, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(CypherParser.COUNT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(CypherParser.FILTER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(CypherParser.EXTRACT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(CypherParser.ANY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(CypherParser.NONE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE() { return GetToken(CypherParser.SINGLE, 0); }
			public OC_SymbolicNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_SymbolicName; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_SymbolicName(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_SymbolicName(this);
			}
		}

		[RuleVersion(0)]
		public OC_SymbolicNameContext oC_SymbolicName()
		{
			OC_SymbolicNameContext _localctx = new OC_SymbolicNameContext(Context, State);
			EnterRule(_localctx, 198, RULE_oC_SymbolicName);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1572;
					_la = TokenStream.LA(1);
					if (!((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 2680059625921L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_LeftArrowHeadContext : ParserRuleContext
		{
			public OC_LeftArrowHeadContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_LeftArrowHead; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_LeftArrowHead(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_LeftArrowHead(this);
			}
		}

		[RuleVersion(0)]
		public OC_LeftArrowHeadContext oC_LeftArrowHead()
		{
			OC_LeftArrowHeadContext _localctx = new OC_LeftArrowHeadContext(Context, State);
			EnterRule(_localctx, 200, RULE_oC_LeftArrowHead);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1574;
					_la = TokenStream.LA(1);
					if (!(((_la) & ~0x3f) == 0 && ((1L << _la) & 2013282304L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_RightArrowHeadContext : ParserRuleContext
		{
			public OC_RightArrowHeadContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_RightArrowHead; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_RightArrowHead(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_RightArrowHead(this);
			}
		}

		[RuleVersion(0)]
		public OC_RightArrowHeadContext oC_RightArrowHead()
		{
			OC_RightArrowHeadContext _localctx = new OC_RightArrowHeadContext(Context, State);
			EnterRule(_localctx, 202, RULE_oC_RightArrowHead);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1576;
					_la = TokenStream.LA(1);
					if (!(((_la) & ~0x3f) == 0 && ((1L << _la) & 32212287488L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OC_DashContext : ParserRuleContext
		{
			public OC_DashContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_oC_Dash; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.EnterOC_Dash(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				ICypherListener typedListener = listener as ICypherListener;
				if (typedListener != null) typedListener.ExitOC_Dash(this);
			}
		}

		[RuleVersion(0)]
		public OC_DashContext oC_Dash()
		{
			OC_DashContext _localctx = new OC_DashContext(Context, State);
			EnterRule(_localctx, 204, RULE_oC_Dash);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 1578;
					_la = TokenStream.LA(1);
					if (!(((_la) & ~0x3f) == 0 && ((1L << _la) & 70334384963584L) != 0))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		private static int[] _serializedATN = {
		4,1,127,1581,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,3,0,208,8,0,1,0,1,0,
		3,0,212,8,0,1,0,3,0,215,8,0,1,0,3,0,218,8,0,1,0,1,0,1,1,1,1,1,2,1,2,3,
		2,226,8,2,1,3,1,3,3,3,230,8,3,1,3,5,3,233,8,3,10,3,12,3,236,9,3,1,4,1,
		4,1,4,1,4,3,4,242,8,4,1,4,1,4,1,4,3,4,247,8,4,1,4,3,4,250,8,4,1,5,1,5,
		3,5,254,8,5,1,6,1,6,3,6,258,8,6,5,6,260,8,6,10,6,12,6,263,9,6,1,6,1,6,
		1,6,3,6,268,8,6,5,6,270,8,6,10,6,12,6,273,9,6,1,6,1,6,3,6,277,8,6,1,6,
		5,6,280,8,6,10,6,12,6,283,9,6,1,6,3,6,286,8,6,1,6,3,6,289,8,6,3,6,291,
		8,6,1,7,1,7,3,7,295,8,7,5,7,297,8,7,10,7,12,7,300,9,7,1,7,1,7,3,7,304,
		8,7,5,7,306,8,7,10,7,12,7,309,9,7,1,7,1,7,3,7,313,8,7,4,7,315,8,7,11,7,
		12,7,316,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,326,8,8,1,9,1,9,1,9,3,9,331,8,
		9,1,10,1,10,3,10,335,8,10,1,10,1,10,3,10,339,8,10,1,10,1,10,3,10,343,8,
		10,1,10,3,10,346,8,10,1,11,1,11,3,11,350,8,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,12,1,12,3,12,360,8,12,1,12,1,12,1,12,5,12,365,8,12,10,12,12,12,
		368,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,380,8,
		13,1,14,1,14,3,14,384,8,14,1,14,1,14,1,15,1,15,3,15,390,8,15,1,15,1,15,
		3,15,394,8,15,1,15,1,15,3,15,398,8,15,1,15,5,15,401,8,15,10,15,12,15,404,
		9,15,1,16,1,16,3,16,408,8,16,1,16,1,16,3,16,412,8,16,1,16,1,16,1,16,1,
		16,3,16,418,8,16,1,16,1,16,3,16,422,8,16,1,16,1,16,1,16,1,16,3,16,428,
		8,16,1,16,1,16,3,16,432,8,16,1,16,1,16,1,16,1,16,3,16,438,8,16,1,16,1,
		16,3,16,442,8,16,1,17,1,17,3,17,446,8,17,1,17,1,17,3,17,450,8,17,1,17,
		1,17,3,17,454,8,17,1,17,1,17,3,17,458,8,17,1,17,5,17,461,8,17,10,17,12,
		17,464,9,17,1,18,1,18,1,18,1,18,3,18,470,8,18,1,18,1,18,3,18,474,8,18,
		1,18,5,18,477,8,18,10,18,12,18,480,9,18,1,19,1,19,1,19,1,19,3,19,486,8,
		19,1,20,1,20,1,20,1,20,3,20,492,8,20,1,20,1,20,1,20,3,20,497,8,20,1,21,
		1,21,1,21,1,21,3,21,503,8,21,1,21,3,21,506,8,21,1,21,1,21,1,21,1,21,3,
		21,512,8,21,3,21,514,8,21,1,22,1,22,3,22,518,8,22,1,22,1,22,3,22,522,8,
		22,1,22,5,22,525,8,22,10,22,12,22,528,9,22,1,22,3,22,531,8,22,1,22,3,22,
		534,8,22,1,23,1,23,1,23,1,23,1,23,3,23,541,8,23,1,23,1,23,1,24,1,24,1,
		24,3,24,548,8,24,1,24,3,24,551,8,24,1,25,1,25,1,25,1,26,3,26,557,8,26,
		1,26,3,26,560,8,26,1,26,1,26,1,26,1,26,3,26,566,8,26,1,26,1,26,3,26,570,
		8,26,1,26,1,26,3,26,574,8,26,1,27,1,27,3,27,578,8,27,1,27,1,27,3,27,582,
		8,27,1,27,5,27,585,8,27,10,27,12,27,588,9,27,1,27,1,27,3,27,592,8,27,1,
		27,1,27,3,27,596,8,27,1,27,5,27,599,8,27,10,27,12,27,602,9,27,3,27,604,
		8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,613,8,28,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,3,29,622,8,29,1,29,5,29,625,8,29,10,29,12,29,628,9,29,
		1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,640,8,32,1,32,3,
		32,643,8,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,651,8,34,1,34,1,34,3,34,
		655,8,34,1,34,5,34,658,8,34,10,34,12,34,661,9,34,1,35,1,35,3,35,665,8,
		35,1,35,1,35,3,35,669,8,35,1,35,1,35,1,35,3,35,674,8,35,1,36,1,36,1,37,
		1,37,3,37,680,8,37,1,37,5,37,683,8,37,10,37,12,37,686,9,37,1,37,1,37,1,
		37,1,37,3,37,692,8,37,1,38,1,38,3,38,696,8,38,1,38,4,38,699,8,38,11,38,
		12,38,700,1,39,1,39,3,39,705,8,39,1,39,1,39,3,39,709,8,39,3,39,711,8,39,
		1,39,1,39,3,39,715,8,39,3,39,717,8,39,1,39,1,39,3,39,721,8,39,3,39,723,
		8,39,1,39,1,39,1,40,1,40,3,40,729,8,40,1,40,1,40,1,41,1,41,3,41,735,8,
		41,1,41,1,41,3,41,739,8,41,1,41,3,41,742,8,41,1,41,3,41,745,8,41,1,41,
		1,41,3,41,749,8,41,1,41,1,41,1,41,1,41,3,41,755,8,41,1,41,1,41,3,41,759,
		8,41,1,41,3,41,762,8,41,1,41,3,41,765,8,41,1,41,1,41,1,41,1,41,3,41,771,
		8,41,1,41,3,41,774,8,41,1,41,3,41,777,8,41,1,41,1,41,3,41,781,8,41,1,41,
		1,41,1,41,1,41,3,41,787,8,41,1,41,3,41,790,8,41,1,41,3,41,793,8,41,1,41,
		1,41,3,41,797,8,41,1,42,1,42,3,42,801,8,42,1,42,1,42,3,42,805,8,42,3,42,
		807,8,42,1,42,1,42,3,42,811,8,42,3,42,813,8,42,1,42,3,42,816,8,42,1,42,
		1,42,3,42,820,8,42,3,42,822,8,42,1,42,1,42,1,43,1,43,3,43,828,8,43,1,44,
		1,44,3,44,832,8,44,1,44,1,44,3,44,836,8,44,1,44,1,44,3,44,840,8,44,1,44,
		3,44,843,8,44,1,44,5,44,846,8,44,10,44,12,44,849,9,44,1,45,1,45,3,45,853,
		8,45,1,45,5,45,856,8,45,10,45,12,45,859,9,45,1,46,1,46,3,46,863,8,46,1,
		46,1,46,1,47,1,47,3,47,869,8,47,1,47,1,47,3,47,873,8,47,3,47,875,8,47,
		1,47,1,47,3,47,879,8,47,1,47,1,47,3,47,883,8,47,3,47,885,8,47,3,47,887,
		8,47,1,48,1,48,1,49,1,49,1,50,1,50,3,50,895,8,50,1,50,4,50,898,8,50,11,
		50,12,50,899,1,51,1,51,1,52,1,52,1,52,1,52,1,52,5,52,909,8,52,10,52,12,
		52,912,9,52,1,53,1,53,1,53,1,53,1,53,5,53,919,8,53,10,53,12,53,922,9,53,
		1,54,1,54,1,54,1,54,1,54,5,54,929,8,54,10,54,12,54,932,9,54,1,55,1,55,
		3,55,936,8,55,5,55,938,8,55,10,55,12,55,941,9,55,1,55,1,55,1,56,1,56,3,
		56,947,8,56,1,56,5,56,950,8,56,10,56,12,56,953,9,56,1,57,1,57,3,57,957,
		8,57,1,57,1,57,1,57,3,57,962,8,57,1,57,1,57,1,57,3,57,967,8,57,1,57,1,
		57,1,57,3,57,972,8,57,1,57,1,57,1,57,3,57,977,8,57,1,57,1,57,1,57,3,57,
		982,8,57,1,57,3,57,985,8,57,1,58,1,58,1,58,1,58,5,58,991,8,58,10,58,12,
		58,994,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1006,
		8,59,1,59,3,59,1009,8,59,1,59,1,59,1,60,1,60,1,60,3,60,1016,8,60,1,60,
		1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1030,8,61,
		1,62,1,62,3,62,1034,8,62,1,62,1,62,3,62,1038,8,62,1,62,1,62,3,62,1042,
		8,62,1,62,1,62,3,62,1046,8,62,1,62,5,62,1049,8,62,10,62,12,62,1052,9,62,
		1,63,1,63,3,63,1056,8,63,1,63,1,63,3,63,1060,8,63,1,63,1,63,3,63,1064,
		8,63,1,63,1,63,3,63,1068,8,63,1,63,1,63,3,63,1072,8,63,1,63,1,63,3,63,
		1076,8,63,1,63,5,63,1079,8,63,10,63,12,63,1082,9,63,1,64,1,64,3,64,1086,
		8,64,1,64,1,64,3,64,1090,8,64,1,64,5,64,1093,8,64,10,64,12,64,1096,9,64,
		1,65,1,65,1,65,3,65,1101,8,65,1,65,3,65,1104,8,65,1,66,1,66,3,66,1108,
		8,66,1,66,1,66,1,66,1,66,1,66,3,66,1115,8,66,1,66,1,66,3,66,1119,8,66,
		1,66,1,66,3,66,1123,8,66,1,66,5,66,1126,8,66,10,66,12,66,1129,9,66,1,67,
		1,67,3,67,1133,8,67,1,67,5,67,1136,8,67,10,67,12,67,1139,9,67,1,67,3,67,
		1142,8,67,1,67,3,67,1145,8,67,1,68,1,68,3,68,1149,8,68,1,68,1,68,1,69,
		1,69,1,69,1,69,1,69,3,69,1158,8,69,1,69,1,69,3,69,1162,8,69,1,69,1,69,
		3,69,1166,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1177,
		8,69,1,70,1,70,3,70,1181,8,70,1,70,4,70,1184,8,70,11,70,12,70,1185,1,70,
		1,70,3,70,1190,8,70,1,70,1,70,3,70,1194,8,70,1,70,4,70,1197,8,70,11,70,
		12,70,1198,3,70,1201,8,70,1,70,3,70,1204,8,70,1,70,1,70,3,70,1208,8,70,
		1,70,3,70,1211,8,70,1,70,3,70,1214,8,70,1,70,1,70,1,71,1,71,3,71,1220,
		8,71,1,71,1,71,3,71,1224,8,71,1,71,1,71,3,71,1228,8,71,1,71,1,71,1,72,
		1,72,3,72,1234,8,72,1,72,1,72,3,72,1238,8,72,1,72,1,72,3,72,1242,8,72,
		1,72,3,72,1245,8,72,1,72,3,72,1248,8,72,1,72,1,72,1,73,1,73,3,73,1254,
		8,73,1,73,1,73,3,73,1258,8,73,1,73,1,73,3,73,1262,8,73,3,73,1264,8,73,
		1,73,1,73,3,73,1268,8,73,1,73,1,73,3,73,1272,8,73,3,73,1274,8,73,1,73,
		1,73,3,73,1278,8,73,1,73,1,73,3,73,1282,8,73,1,73,1,73,1,74,1,74,3,74,
		1288,8,74,1,74,1,74,3,74,1292,8,74,1,74,1,74,3,74,1296,8,74,1,74,1,74,
		1,74,1,74,3,74,1302,8,74,1,74,1,74,3,74,1306,8,74,1,74,1,74,3,74,1310,
		8,74,1,74,1,74,1,74,1,74,3,74,1316,8,74,1,74,1,74,3,74,1320,8,74,1,74,
		1,74,3,74,1324,8,74,1,74,1,74,1,74,1,74,3,74,1330,8,74,1,74,1,74,3,74,
		1334,8,74,1,74,1,74,3,74,1338,8,74,1,74,1,74,3,74,1342,8,74,1,75,1,75,
		3,75,1346,8,75,1,75,3,75,1349,8,75,1,76,1,76,1,77,1,77,3,77,1355,8,77,
		1,77,1,77,3,77,1359,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,
		1,79,3,79,1371,8,79,1,79,1,79,3,79,1375,8,79,1,79,1,79,3,79,1379,8,79,
		3,79,1381,8,79,1,79,1,79,3,79,1385,8,79,1,79,1,79,3,79,1389,8,79,1,79,
		1,79,3,79,1393,8,79,5,79,1395,8,79,10,79,12,79,1398,9,79,3,79,1400,8,79,
		1,79,1,79,1,80,1,80,1,80,1,81,1,81,3,81,1409,8,81,1,81,1,81,3,81,1413,
		8,81,1,81,1,81,1,81,3,81,1418,8,81,1,81,3,81,1421,8,81,3,81,1423,8,81,
		1,81,3,81,1426,8,81,1,81,1,81,1,82,1,82,3,82,1432,8,82,1,82,1,82,3,82,
		1436,8,82,1,82,1,82,3,82,1440,8,82,1,82,1,82,3,82,1444,8,82,1,82,1,82,
		3,82,1448,8,82,5,82,1450,8,82,10,82,12,82,1453,9,82,3,82,1455,8,82,1,82,
		1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,5,86,1469,8,86,
		10,86,12,86,1472,9,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1482,
		8,88,1,89,1,89,1,90,1,90,3,90,1488,8,90,1,91,1,91,1,92,1,92,1,93,1,93,
		3,93,1496,8,93,1,93,1,93,3,93,1500,8,93,1,93,1,93,3,93,1504,8,93,1,93,
		1,93,3,93,1508,8,93,5,93,1510,8,93,10,93,12,93,1513,9,93,3,93,1515,8,93,
		1,93,1,93,1,94,1,94,3,94,1521,8,94,1,94,1,94,3,94,1525,8,94,1,94,1,94,
		3,94,1529,8,94,1,94,1,94,3,94,1533,8,94,1,94,1,94,3,94,1537,8,94,1,94,
		1,94,3,94,1541,8,94,1,94,1,94,3,94,1545,8,94,1,94,1,94,3,94,1549,8,94,
		5,94,1551,8,94,10,94,12,94,1554,9,94,3,94,1556,8,94,1,94,1,94,1,95,1,95,
		1,96,1,96,1,96,3,96,1565,8,96,1,97,1,97,3,97,1569,8,97,1,98,1,98,1,99,
		1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,102,0,0,103,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,194,196,198,200,202,204,0,10,1,0,68,71,1,0,
		18,19,1,0,93,94,1,0,95,97,1,0,105,106,5,0,46,58,61,82,84,88,92,94,109,
		118,5,0,83,83,89,91,98,98,119,121,124,124,2,0,14,14,27,30,2,0,15,15,31,
		34,2,0,19,19,35,45,1800,0,207,1,0,0,0,2,221,1,0,0,0,4,225,1,0,0,0,6,227,
		1,0,0,0,8,249,1,0,0,0,10,253,1,0,0,0,12,290,1,0,0,0,14,314,1,0,0,0,16,
		325,1,0,0,0,18,330,1,0,0,0,20,334,1,0,0,0,22,347,1,0,0,0,24,357,1,0,0,
		0,26,379,1,0,0,0,28,381,1,0,0,0,30,387,1,0,0,0,32,441,1,0,0,0,34,445,1,
		0,0,0,36,465,1,0,0,0,38,485,1,0,0,0,40,487,1,0,0,0,42,498,1,0,0,0,44,515,
		1,0,0,0,46,540,1,0,0,0,48,544,1,0,0,0,50,552,1,0,0,0,52,559,1,0,0,0,54,
		603,1,0,0,0,56,612,1,0,0,0,58,614,1,0,0,0,60,629,1,0,0,0,62,633,1,0,0,
		0,64,637,1,0,0,0,66,644,1,0,0,0,68,648,1,0,0,0,70,673,1,0,0,0,72,675,1,
		0,0,0,74,691,1,0,0,0,76,693,1,0,0,0,78,702,1,0,0,0,80,726,1,0,0,0,82,796,
		1,0,0,0,84,798,1,0,0,0,86,827,1,0,0,0,88,829,1,0,0,0,90,850,1,0,0,0,92,
		860,1,0,0,0,94,866,1,0,0,0,96,888,1,0,0,0,98,890,1,0,0,0,100,892,1,0,0,
		0,102,901,1,0,0,0,104,903,1,0,0,0,106,913,1,0,0,0,108,923,1,0,0,0,110,
		939,1,0,0,0,112,944,1,0,0,0,114,984,1,0,0,0,116,986,1,0,0,0,118,1005,1,
		0,0,0,120,1012,1,0,0,0,122,1029,1,0,0,0,124,1031,1,0,0,0,126,1053,1,0,
		0,0,128,1083,1,0,0,0,130,1103,1,0,0,0,132,1105,1,0,0,0,134,1130,1,0,0,
		0,136,1146,1,0,0,0,138,1176,1,0,0,0,140,1200,1,0,0,0,142,1217,1,0,0,0,
		144,1231,1,0,0,0,146,1251,1,0,0,0,148,1341,1,0,0,0,150,1343,1,0,0,0,152,
		1350,1,0,0,0,154,1352,1,0,0,0,156,1362,1,0,0,0,158,1368,1,0,0,0,160,1403,
		1,0,0,0,162,1406,1,0,0,0,164,1429,1,0,0,0,166,1458,1,0,0,0,168,1460,1,
		0,0,0,170,1462,1,0,0,0,172,1470,1,0,0,0,174,1473,1,0,0,0,176,1481,1,0,
		0,0,178,1483,1,0,0,0,180,1487,1,0,0,0,182,1489,1,0,0,0,184,1491,1,0,0,
		0,186,1493,1,0,0,0,188,1518,1,0,0,0,190,1559,1,0,0,0,192,1561,1,0,0,0,
		194,1568,1,0,0,0,196,1570,1,0,0,0,198,1572,1,0,0,0,200,1574,1,0,0,0,202,
		1576,1,0,0,0,204,1578,1,0,0,0,206,208,5,125,0,0,207,206,1,0,0,0,207,208,
		1,0,0,0,208,209,1,0,0,0,209,214,3,2,1,0,210,212,5,125,0,0,211,210,1,0,
		0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,215,5,1,0,0,214,211,1,0,0,0,214,
		215,1,0,0,0,215,217,1,0,0,0,216,218,5,125,0,0,217,216,1,0,0,0,217,218,
		1,0,0,0,218,219,1,0,0,0,219,220,5,0,0,1,220,1,1,0,0,0,221,222,3,4,2,0,
		222,3,1,0,0,0,223,226,3,6,3,0,224,226,3,42,21,0,225,223,1,0,0,0,225,224,
		1,0,0,0,226,5,1,0,0,0,227,234,3,10,5,0,228,230,5,125,0,0,229,228,1,0,0,
		0,229,230,1,0,0,0,230,231,1,0,0,0,231,233,3,8,4,0,232,229,1,0,0,0,233,
		236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,7,1,0,0,0,236,234,1,0,
		0,0,237,238,5,46,0,0,238,239,5,125,0,0,239,241,5,47,0,0,240,242,5,125,
		0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,250,3,10,5,0,244,
		246,5,46,0,0,245,247,5,125,0,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,
		1,0,0,0,248,250,3,10,5,0,249,237,1,0,0,0,249,244,1,0,0,0,250,9,1,0,0,0,
		251,254,3,12,6,0,252,254,3,14,7,0,253,251,1,0,0,0,253,252,1,0,0,0,254,
		11,1,0,0,0,255,257,3,18,9,0,256,258,5,125,0,0,257,256,1,0,0,0,257,258,
		1,0,0,0,258,260,1,0,0,0,259,255,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,
		0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,291,3,50,25,0,265,
		267,3,18,9,0,266,268,5,125,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,
		1,0,0,0,269,265,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,
		0,272,274,1,0,0,0,273,271,1,0,0,0,274,281,3,16,8,0,275,277,5,125,0,0,276,
		275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,280,3,16,8,0,279,276,1,
		0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,288,1,0,0,0,
		283,281,1,0,0,0,284,286,5,125,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,
		287,1,0,0,0,287,289,3,50,25,0,288,285,1,0,0,0,288,289,1,0,0,0,289,291,
		1,0,0,0,290,261,1,0,0,0,290,271,1,0,0,0,291,13,1,0,0,0,292,294,3,18,9,
		0,293,295,5,125,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,
		292,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,307,1,
		0,0,0,300,298,1,0,0,0,301,303,3,16,8,0,302,304,5,125,0,0,303,302,1,0,0,
		0,303,304,1,0,0,0,304,306,1,0,0,0,305,301,1,0,0,0,306,309,1,0,0,0,307,
		305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,312,3,
		48,24,0,311,313,5,125,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,
		0,0,314,298,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,
		318,1,0,0,0,318,319,3,12,6,0,319,15,1,0,0,0,320,326,3,28,14,0,321,326,
		3,24,12,0,322,326,3,34,17,0,323,326,3,30,15,0,324,326,3,36,18,0,325,320,
		1,0,0,0,325,321,1,0,0,0,325,322,1,0,0,0,325,323,1,0,0,0,325,324,1,0,0,
		0,326,17,1,0,0,0,327,331,3,20,10,0,328,331,3,22,11,0,329,331,3,40,20,0,
		330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,19,1,0,0,0,332,333,
		5,48,0,0,333,335,5,125,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,1,0,
		0,0,336,338,5,49,0,0,337,339,5,125,0,0,338,337,1,0,0,0,338,339,1,0,0,0,
		339,340,1,0,0,0,340,345,3,68,34,0,341,343,5,125,0,0,342,341,1,0,0,0,342,
		343,1,0,0,0,343,344,1,0,0,0,344,346,3,66,33,0,345,342,1,0,0,0,345,346,
		1,0,0,0,346,21,1,0,0,0,347,349,5,50,0,0,348,350,5,125,0,0,349,348,1,0,
		0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,3,102,51,0,352,353,5,125,0,
		0,353,354,5,51,0,0,354,355,5,125,0,0,355,356,3,174,87,0,356,23,1,0,0,0,
		357,359,5,52,0,0,358,360,5,125,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,
		361,1,0,0,0,361,366,3,70,35,0,362,363,5,125,0,0,363,365,3,26,13,0,364,
		362,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,25,1,0,
		0,0,368,366,1,0,0,0,369,370,5,53,0,0,370,371,5,125,0,0,371,372,5,49,0,
		0,372,373,5,125,0,0,373,380,3,30,15,0,374,375,5,53,0,0,375,376,5,125,0,
		0,376,377,5,54,0,0,377,378,5,125,0,0,378,380,3,30,15,0,379,369,1,0,0,0,
		379,374,1,0,0,0,380,27,1,0,0,0,381,383,5,54,0,0,382,384,5,125,0,0,383,
		382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,3,68,34,0,386,29,1,
		0,0,0,387,389,5,55,0,0,388,390,5,125,0,0,389,388,1,0,0,0,389,390,1,0,0,
		0,390,391,1,0,0,0,391,402,3,32,16,0,392,394,5,125,0,0,393,392,1,0,0,0,
		393,394,1,0,0,0,394,395,1,0,0,0,395,397,5,2,0,0,396,398,5,125,0,0,397,
		396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,401,3,32,16,0,400,393,
		1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,31,1,0,0,0,
		404,402,1,0,0,0,405,407,3,100,50,0,406,408,5,125,0,0,407,406,1,0,0,0,407,
		408,1,0,0,0,408,409,1,0,0,0,409,411,5,3,0,0,410,412,5,125,0,0,411,410,
		1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,3,102,51,0,414,442,1,0,
		0,0,415,417,3,174,87,0,416,418,5,125,0,0,417,416,1,0,0,0,417,418,1,0,0,
		0,418,419,1,0,0,0,419,421,5,3,0,0,420,422,5,125,0,0,421,420,1,0,0,0,421,
		422,1,0,0,0,422,423,1,0,0,0,423,424,3,102,51,0,424,442,1,0,0,0,425,427,
		3,174,87,0,426,428,5,125,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,
		0,0,0,429,431,5,4,0,0,430,432,5,125,0,0,431,430,1,0,0,0,431,432,1,0,0,
		0,432,433,1,0,0,0,433,434,3,102,51,0,434,442,1,0,0,0,435,437,3,174,87,
		0,436,438,5,125,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
		440,3,90,45,0,440,442,1,0,0,0,441,405,1,0,0,0,441,415,1,0,0,0,441,425,
		1,0,0,0,441,435,1,0,0,0,442,33,1,0,0,0,443,444,5,56,0,0,444,446,5,125,
		0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,449,5,57,0,0,448,
		450,5,125,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,462,
		3,102,51,0,452,454,5,125,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,
		0,0,0,455,457,5,2,0,0,456,458,5,125,0,0,457,456,1,0,0,0,457,458,1,0,0,
		0,458,459,1,0,0,0,459,461,3,102,51,0,460,453,1,0,0,0,461,464,1,0,0,0,462,
		460,1,0,0,0,462,463,1,0,0,0,463,35,1,0,0,0,464,462,1,0,0,0,465,466,5,58,
		0,0,466,467,5,125,0,0,467,478,3,38,19,0,468,470,5,125,0,0,469,468,1,0,
		0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,473,5,2,0,0,472,474,5,125,0,0,
		473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,477,3,38,19,0,476,
		469,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,37,1,0,
		0,0,480,478,1,0,0,0,481,482,3,174,87,0,482,483,3,90,45,0,483,486,1,0,0,
		0,484,486,3,100,50,0,485,481,1,0,0,0,485,484,1,0,0,0,486,39,1,0,0,0,487,
		488,5,59,0,0,488,489,5,125,0,0,489,496,3,164,82,0,490,492,5,125,0,0,491,
		490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,5,60,0,0,494,495,5,
		125,0,0,495,497,3,44,22,0,496,491,1,0,0,0,496,497,1,0,0,0,497,41,1,0,0,
		0,498,499,5,59,0,0,499,502,5,125,0,0,500,503,3,164,82,0,501,503,3,166,
		83,0,502,500,1,0,0,0,502,501,1,0,0,0,503,513,1,0,0,0,504,506,5,125,0,0,
		505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,508,5,60,0,0,508,511,
		5,125,0,0,509,512,5,5,0,0,510,512,3,44,22,0,511,509,1,0,0,0,511,510,1,
		0,0,0,512,514,1,0,0,0,513,505,1,0,0,0,513,514,1,0,0,0,514,43,1,0,0,0,515,
		526,3,46,23,0,516,518,5,125,0,0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,
		1,0,0,0,519,521,5,2,0,0,520,522,5,125,0,0,521,520,1,0,0,0,521,522,1,0,
		0,0,522,523,1,0,0,0,523,525,3,46,23,0,524,517,1,0,0,0,525,528,1,0,0,0,
		526,524,1,0,0,0,526,527,1,0,0,0,527,533,1,0,0,0,528,526,1,0,0,0,529,531,
		5,125,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,534,3,66,
		33,0,533,530,1,0,0,0,533,534,1,0,0,0,534,45,1,0,0,0,535,536,3,168,84,0,
		536,537,5,125,0,0,537,538,5,51,0,0,538,539,5,125,0,0,539,541,1,0,0,0,540,
		535,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,3,174,87,0,543,47,
		1,0,0,0,544,545,5,61,0,0,545,550,3,52,26,0,546,548,5,125,0,0,547,546,1,
		0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,551,3,66,33,0,550,547,1,0,0,
		0,550,551,1,0,0,0,551,49,1,0,0,0,552,553,5,62,0,0,553,554,3,52,26,0,554,
		51,1,0,0,0,555,557,5,125,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,1,
		0,0,0,558,560,5,63,0,0,559,556,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,
		561,562,5,125,0,0,562,565,3,54,27,0,563,564,5,125,0,0,564,566,3,58,29,
		0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,1,0,0,0,567,568,5,125,0,0,568,
		570,3,60,30,0,569,567,1,0,0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,572,
		5,125,0,0,572,574,3,62,31,0,573,571,1,0,0,0,573,574,1,0,0,0,574,53,1,0,
		0,0,575,586,5,5,0,0,576,578,5,125,0,0,577,576,1,0,0,0,577,578,1,0,0,0,
		578,579,1,0,0,0,579,581,5,2,0,0,580,582,5,125,0,0,581,580,1,0,0,0,581,
		582,1,0,0,0,582,583,1,0,0,0,583,585,3,56,28,0,584,577,1,0,0,0,585,588,
		1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,604,1,0,0,0,588,586,1,0,0,
		0,589,600,3,56,28,0,590,592,5,125,0,0,591,590,1,0,0,0,591,592,1,0,0,0,
		592,593,1,0,0,0,593,595,5,2,0,0,594,596,5,125,0,0,595,594,1,0,0,0,595,
		596,1,0,0,0,596,597,1,0,0,0,597,599,3,56,28,0,598,591,1,0,0,0,599,602,
		1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,
		0,603,575,1,0,0,0,603,589,1,0,0,0,604,55,1,0,0,0,605,606,3,102,51,0,606,
		607,5,125,0,0,607,608,5,51,0,0,608,609,5,125,0,0,609,610,3,174,87,0,610,
		613,1,0,0,0,611,613,3,102,51,0,612,605,1,0,0,0,612,611,1,0,0,0,613,57,
		1,0,0,0,614,615,5,64,0,0,615,616,5,125,0,0,616,617,5,65,0,0,617,618,5,
		125,0,0,618,626,3,64,32,0,619,621,5,2,0,0,620,622,5,125,0,0,621,620,1,
		0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,625,3,64,32,0,624,619,1,0,0,
		0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,59,1,0,0,0,628,626,
		1,0,0,0,629,630,5,66,0,0,630,631,5,125,0,0,631,632,3,102,51,0,632,61,1,
		0,0,0,633,634,5,67,0,0,634,635,5,125,0,0,635,636,3,102,51,0,636,63,1,0,
		0,0,637,642,3,102,51,0,638,640,5,125,0,0,639,638,1,0,0,0,639,640,1,0,0,
		0,640,641,1,0,0,0,641,643,7,0,0,0,642,639,1,0,0,0,642,643,1,0,0,0,643,
		65,1,0,0,0,644,645,5,72,0,0,645,646,5,125,0,0,646,647,3,102,51,0,647,67,
		1,0,0,0,648,659,3,70,35,0,649,651,5,125,0,0,650,649,1,0,0,0,650,651,1,
		0,0,0,651,652,1,0,0,0,652,654,5,2,0,0,653,655,5,125,0,0,654,653,1,0,0,
		0,654,655,1,0,0,0,655,656,1,0,0,0,656,658,3,70,35,0,657,650,1,0,0,0,658,
		661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,69,1,0,0,0,661,659,1,0,
		0,0,662,664,3,174,87,0,663,665,5,125,0,0,664,663,1,0,0,0,664,665,1,0,0,
		0,665,666,1,0,0,0,666,668,5,3,0,0,667,669,5,125,0,0,668,667,1,0,0,0,668,
		669,1,0,0,0,669,670,1,0,0,0,670,671,3,72,36,0,671,674,1,0,0,0,672,674,
		3,72,36,0,673,662,1,0,0,0,673,672,1,0,0,0,674,71,1,0,0,0,675,676,3,74,
		37,0,676,73,1,0,0,0,677,684,3,78,39,0,678,680,5,125,0,0,679,678,1,0,0,
		0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,3,80,40,0,682,679,1,0,0,0,683,
		686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,692,1,0,0,0,686,684,1,
		0,0,0,687,688,5,6,0,0,688,689,3,74,37,0,689,690,5,7,0,0,690,692,1,0,0,
		0,691,677,1,0,0,0,691,687,1,0,0,0,692,75,1,0,0,0,693,698,3,78,39,0,694,
		696,5,125,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,
		3,80,40,0,698,695,1,0,0,0,699,700,1,0,0,0,700,698,1,0,0,0,700,701,1,0,
		0,0,701,77,1,0,0,0,702,704,5,6,0,0,703,705,5,125,0,0,704,703,1,0,0,0,704,
		705,1,0,0,0,705,710,1,0,0,0,706,708,3,174,87,0,707,709,5,125,0,0,708,707,
		1,0,0,0,708,709,1,0,0,0,709,711,1,0,0,0,710,706,1,0,0,0,710,711,1,0,0,
		0,711,716,1,0,0,0,712,714,3,90,45,0,713,715,5,125,0,0,714,713,1,0,0,0,
		714,715,1,0,0,0,715,717,1,0,0,0,716,712,1,0,0,0,716,717,1,0,0,0,717,722,
		1,0,0,0,718,720,3,86,43,0,719,721,5,125,0,0,720,719,1,0,0,0,720,721,1,
		0,0,0,721,723,1,0,0,0,722,718,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,
		724,725,5,7,0,0,725,79,1,0,0,0,726,728,3,82,41,0,727,729,5,125,0,0,728,
		727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,3,78,39,0,731,81,1,
		0,0,0,732,734,3,200,100,0,733,735,5,125,0,0,734,733,1,0,0,0,734,735,1,
		0,0,0,735,736,1,0,0,0,736,738,3,204,102,0,737,739,5,125,0,0,738,737,1,
		0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,742,3,84,42,0,741,740,1,0,0,
		0,741,742,1,0,0,0,742,744,1,0,0,0,743,745,5,125,0,0,744,743,1,0,0,0,744,
		745,1,0,0,0,745,746,1,0,0,0,746,748,3,204,102,0,747,749,5,125,0,0,748,
		747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,3,202,101,0,751,797,
		1,0,0,0,752,754,3,200,100,0,753,755,5,125,0,0,754,753,1,0,0,0,754,755,
		1,0,0,0,755,756,1,0,0,0,756,758,3,204,102,0,757,759,5,125,0,0,758,757,
		1,0,0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,762,3,84,42,0,761,760,1,0,
		0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,765,5,125,0,0,764,763,1,0,0,0,
		764,765,1,0,0,0,765,766,1,0,0,0,766,767,3,204,102,0,767,797,1,0,0,0,768,
		770,3,204,102,0,769,771,5,125,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,
		773,1,0,0,0,772,774,3,84,42,0,773,772,1,0,0,0,773,774,1,0,0,0,774,776,
		1,0,0,0,775,777,5,125,0,0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,0,
		0,0,778,780,3,204,102,0,779,781,5,125,0,0,780,779,1,0,0,0,780,781,1,0,
		0,0,781,782,1,0,0,0,782,783,3,202,101,0,783,797,1,0,0,0,784,786,3,204,
		102,0,785,787,5,125,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,
		0,788,790,3,84,42,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,
		793,5,125,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,
		3,204,102,0,795,797,1,0,0,0,796,732,1,0,0,0,796,752,1,0,0,0,796,768,1,
		0,0,0,796,784,1,0,0,0,797,83,1,0,0,0,798,800,5,8,0,0,799,801,5,125,0,0,
		800,799,1,0,0,0,800,801,1,0,0,0,801,806,1,0,0,0,802,804,3,174,87,0,803,
		805,5,125,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,802,
		1,0,0,0,806,807,1,0,0,0,807,812,1,0,0,0,808,810,3,88,44,0,809,811,5,125,
		0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,808,1,0,0,0,812,
		813,1,0,0,0,813,815,1,0,0,0,814,816,3,94,47,0,815,814,1,0,0,0,815,816,
		1,0,0,0,816,821,1,0,0,0,817,819,3,86,43,0,818,820,5,125,0,0,819,818,1,
		0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,817,1,0,0,0,821,822,1,0,0,0,
		822,823,1,0,0,0,823,824,5,9,0,0,824,85,1,0,0,0,825,828,3,188,94,0,826,
		828,3,192,96,0,827,825,1,0,0,0,827,826,1,0,0,0,828,87,1,0,0,0,829,831,
		5,10,0,0,830,832,5,125,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,
		0,0,833,847,3,98,49,0,834,836,5,125,0,0,835,834,1,0,0,0,835,836,1,0,0,
		0,836,837,1,0,0,0,837,839,5,11,0,0,838,840,5,10,0,0,839,838,1,0,0,0,839,
		840,1,0,0,0,840,842,1,0,0,0,841,843,5,125,0,0,842,841,1,0,0,0,842,843,
		1,0,0,0,843,844,1,0,0,0,844,846,3,98,49,0,845,835,1,0,0,0,846,849,1,0,
		0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,89,1,0,0,0,849,847,1,0,0,0,850,
		857,3,92,46,0,851,853,5,125,0,0,852,851,1,0,0,0,852,853,1,0,0,0,853,854,
		1,0,0,0,854,856,3,92,46,0,855,852,1,0,0,0,856,859,1,0,0,0,857,855,1,0,
		0,0,857,858,1,0,0,0,858,91,1,0,0,0,859,857,1,0,0,0,860,862,5,10,0,0,861,
		863,5,125,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,
		3,96,48,0,865,93,1,0,0,0,866,868,5,5,0,0,867,869,5,125,0,0,868,867,1,0,
		0,0,868,869,1,0,0,0,869,874,1,0,0,0,870,872,3,182,91,0,871,873,5,125,0,
		0,872,871,1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,870,1,0,0,0,874,
		875,1,0,0,0,875,886,1,0,0,0,876,878,5,12,0,0,877,879,5,125,0,0,878,877,
		1,0,0,0,878,879,1,0,0,0,879,884,1,0,0,0,880,882,3,182,91,0,881,883,5,125,
		0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,880,1,0,0,0,884,
		885,1,0,0,0,885,887,1,0,0,0,886,876,1,0,0,0,886,887,1,0,0,0,887,95,1,0,
		0,0,888,889,3,194,97,0,889,97,1,0,0,0,890,891,3,194,97,0,891,99,1,0,0,
		0,892,897,3,138,69,0,893,895,5,125,0,0,894,893,1,0,0,0,894,895,1,0,0,0,
		895,896,1,0,0,0,896,898,3,136,68,0,897,894,1,0,0,0,898,899,1,0,0,0,899,
		897,1,0,0,0,899,900,1,0,0,0,900,101,1,0,0,0,901,902,3,104,52,0,902,103,
		1,0,0,0,903,910,3,106,53,0,904,905,5,125,0,0,905,906,5,73,0,0,906,907,
		5,125,0,0,907,909,3,106,53,0,908,904,1,0,0,0,909,912,1,0,0,0,910,908,1,
		0,0,0,910,911,1,0,0,0,911,105,1,0,0,0,912,910,1,0,0,0,913,920,3,108,54,
		0,914,915,5,125,0,0,915,916,5,74,0,0,916,917,5,125,0,0,917,919,3,108,54,
		0,918,914,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,
		107,1,0,0,0,922,920,1,0,0,0,923,930,3,110,55,0,924,925,5,125,0,0,925,926,
		5,75,0,0,926,927,5,125,0,0,927,929,3,110,55,0,928,924,1,0,0,0,929,932,
		1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,109,1,0,0,0,932,930,1,0,0,
		0,933,935,5,76,0,0,934,936,5,125,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,
		938,1,0,0,0,937,933,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,939,940,1,
		0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,943,3,112,56,0,943,111,1,0,0,
		0,944,951,3,116,58,0,945,947,5,125,0,0,946,945,1,0,0,0,946,947,1,0,0,0,
		947,948,1,0,0,0,948,950,3,114,57,0,949,946,1,0,0,0,950,953,1,0,0,0,951,
		949,1,0,0,0,951,952,1,0,0,0,952,113,1,0,0,0,953,951,1,0,0,0,954,956,5,
		3,0,0,955,957,5,125,0,0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,
		0,958,985,3,116,58,0,959,961,5,13,0,0,960,962,5,125,0,0,961,960,1,0,0,
		0,961,962,1,0,0,0,962,963,1,0,0,0,963,985,3,116,58,0,964,966,5,14,0,0,
		965,967,5,125,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,
		985,3,116,58,0,969,971,5,15,0,0,970,972,5,125,0,0,971,970,1,0,0,0,971,
		972,1,0,0,0,972,973,1,0,0,0,973,985,3,116,58,0,974,976,5,16,0,0,975,977,
		5,125,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,0,978,985,3,116,
		58,0,979,981,5,17,0,0,980,982,5,125,0,0,981,980,1,0,0,0,981,982,1,0,0,
		0,982,983,1,0,0,0,983,985,3,116,58,0,984,954,1,0,0,0,984,959,1,0,0,0,984,
		964,1,0,0,0,984,969,1,0,0,0,984,974,1,0,0,0,984,979,1,0,0,0,985,115,1,
		0,0,0,986,992,3,124,62,0,987,991,3,118,59,0,988,991,3,120,60,0,989,991,
		3,122,61,0,990,987,1,0,0,0,990,988,1,0,0,0,990,989,1,0,0,0,991,994,1,0,
		0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,117,1,0,0,0,994,992,1,0,0,0,995,
		996,5,125,0,0,996,997,5,77,0,0,997,998,5,125,0,0,998,1006,5,61,0,0,999,
		1000,5,125,0,0,1000,1001,5,78,0,0,1001,1002,5,125,0,0,1002,1006,5,61,0,
		0,1003,1004,5,125,0,0,1004,1006,5,79,0,0,1005,995,1,0,0,0,1005,999,1,0,
		0,0,1005,1003,1,0,0,0,1006,1008,1,0,0,0,1007,1009,5,125,0,0,1008,1007,
		1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,3,124,62,0,1011,
		119,1,0,0,0,1012,1013,5,125,0,0,1013,1015,5,80,0,0,1014,1016,5,125,0,0,
		1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1018,3,124,
		62,0,1018,121,1,0,0,0,1019,1020,5,125,0,0,1020,1021,5,81,0,0,1021,1022,
		5,125,0,0,1022,1030,5,82,0,0,1023,1024,5,125,0,0,1024,1025,5,81,0,0,1025,
		1026,5,125,0,0,1026,1027,5,76,0,0,1027,1028,5,125,0,0,1028,1030,5,82,0,
		0,1029,1019,1,0,0,0,1029,1023,1,0,0,0,1030,123,1,0,0,0,1031,1050,3,126,
		63,0,1032,1034,5,125,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,
		1,0,0,0,1035,1037,5,18,0,0,1036,1038,5,125,0,0,1037,1036,1,0,0,0,1037,
		1038,1,0,0,0,1038,1039,1,0,0,0,1039,1049,3,126,63,0,1040,1042,5,125,0,
		0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1045,5,19,
		0,0,1044,1046,5,125,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,
		1,0,0,0,1047,1049,3,126,63,0,1048,1033,1,0,0,0,1048,1041,1,0,0,0,1049,
		1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,125,1,0,0,0,1052,
		1050,1,0,0,0,1053,1080,3,128,64,0,1054,1056,5,125,0,0,1055,1054,1,0,0,
		0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1059,5,5,0,0,1058,1060,5,125,
		0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1079,3,
		128,64,0,1062,1064,5,125,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,
		1065,1,0,0,0,1065,1067,5,20,0,0,1066,1068,5,125,0,0,1067,1066,1,0,0,0,
		1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1079,3,128,64,0,1070,1072,5,125,
		0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1075,5,
		21,0,0,1074,1076,5,125,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,
		1,0,0,0,1077,1079,3,128,64,0,1078,1055,1,0,0,0,1078,1063,1,0,0,0,1078,
		1071,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,
		127,1,0,0,0,1082,1080,1,0,0,0,1083,1094,3,130,65,0,1084,1086,5,125,0,0,
		1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,5,22,0,
		0,1088,1090,5,125,0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,
		0,0,0,1091,1093,3,130,65,0,1092,1085,1,0,0,0,1093,1096,1,0,0,0,1094,1092,
		1,0,0,0,1094,1095,1,0,0,0,1095,129,1,0,0,0,1096,1094,1,0,0,0,1097,1104,
		3,132,66,0,1098,1100,7,1,0,0,1099,1101,5,125,0,0,1100,1099,1,0,0,0,1100,
		1101,1,0,0,0,1101,1102,1,0,0,0,1102,1104,3,132,66,0,1103,1097,1,0,0,0,
		1103,1098,1,0,0,0,1104,131,1,0,0,0,1105,1127,3,134,67,0,1106,1108,5,125,
		0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,5,
		8,0,0,1110,1111,3,102,51,0,1111,1112,5,9,0,0,1112,1126,1,0,0,0,1113,1115,
		5,125,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1118,
		5,8,0,0,1117,1119,3,102,51,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,
		1120,1,0,0,0,1120,1122,5,12,0,0,1121,1123,3,102,51,0,1122,1121,1,0,0,0,
		1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1126,5,9,0,0,1125,1107,1,0,0,
		0,1125,1114,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,
		0,0,1128,133,1,0,0,0,1129,1127,1,0,0,0,1130,1137,3,138,69,0,1131,1133,
		5,125,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,1136,
		3,136,68,0,1135,1132,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,
		1138,1,0,0,0,1138,1144,1,0,0,0,1139,1137,1,0,0,0,1140,1142,5,125,0,0,1141,
		1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1145,3,90,45,0,1144,
		1141,1,0,0,0,1144,1145,1,0,0,0,1145,135,1,0,0,0,1146,1148,5,23,0,0,1147,
		1149,5,125,0,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1150,1,0,0,0,1150,
		1151,3,190,95,0,1151,137,1,0,0,0,1152,1177,3,176,88,0,1153,1177,3,192,
		96,0,1154,1177,3,140,70,0,1155,1157,5,83,0,0,1156,1158,5,125,0,0,1157,
		1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1161,5,6,0,0,1160,
		1162,5,125,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,
		1165,5,5,0,0,1164,1166,5,125,0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,
		1167,1,0,0,0,1167,1177,5,7,0,0,1168,1177,3,144,72,0,1169,1177,3,146,73,
		0,1170,1177,3,148,74,0,1171,1177,3,152,76,0,1172,1177,3,154,77,0,1173,
		1177,3,158,79,0,1174,1177,3,162,81,0,1175,1177,3,174,87,0,1176,1152,1,
		0,0,0,1176,1153,1,0,0,0,1176,1154,1,0,0,0,1176,1155,1,0,0,0,1176,1168,
		1,0,0,0,1176,1169,1,0,0,0,1176,1170,1,0,0,0,1176,1171,1,0,0,0,1176,1172,
		1,0,0,0,1176,1173,1,0,0,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,139,
		1,0,0,0,1178,1183,5,84,0,0,1179,1181,5,125,0,0,1180,1179,1,0,0,0,1180,
		1181,1,0,0,0,1181,1182,1,0,0,0,1182,1184,3,142,71,0,1183,1180,1,0,0,0,
		1184,1185,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1201,1,0,0,
		0,1187,1189,5,84,0,0,1188,1190,5,125,0,0,1189,1188,1,0,0,0,1189,1190,1,
		0,0,0,1190,1191,1,0,0,0,1191,1196,3,102,51,0,1192,1194,5,125,0,0,1193,
		1192,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1197,3,142,71,0,
		1196,1193,1,0,0,0,1197,1198,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,
		0,1199,1201,1,0,0,0,1200,1178,1,0,0,0,1200,1187,1,0,0,0,1201,1210,1,0,
		0,0,1202,1204,5,125,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,
		1,0,0,0,1205,1207,5,85,0,0,1206,1208,5,125,0,0,1207,1206,1,0,0,0,1207,
		1208,1,0,0,0,1208,1209,1,0,0,0,1209,1211,3,102,51,0,1210,1203,1,0,0,0,
		1210,1211,1,0,0,0,1211,1213,1,0,0,0,1212,1214,5,125,0,0,1213,1212,1,0,
		0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,5,86,0,0,1216,141,1,
		0,0,0,1217,1219,5,87,0,0,1218,1220,5,125,0,0,1219,1218,1,0,0,0,1219,1220,
		1,0,0,0,1220,1221,1,0,0,0,1221,1223,3,102,51,0,1222,1224,5,125,0,0,1223,
		1222,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,5,88,0,0,1226,
		1228,5,125,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,
		1230,3,102,51,0,1230,143,1,0,0,0,1231,1233,5,8,0,0,1232,1234,5,125,0,0,
		1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1244,3,150,
		75,0,1236,1238,5,125,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,
		1,0,0,0,1239,1241,5,11,0,0,1240,1242,5,125,0,0,1241,1240,1,0,0,0,1241,
		1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,3,102,51,0,1244,1237,1,0,0,0,
		1244,1245,1,0,0,0,1245,1247,1,0,0,0,1246,1248,5,125,0,0,1247,1246,1,0,
		0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,5,9,0,0,1250,145,1,0,
		0,0,1251,1253,5,8,0,0,1252,1254,5,125,0,0,1253,1252,1,0,0,0,1253,1254,
		1,0,0,0,1254,1263,1,0,0,0,1255,1257,3,174,87,0,1256,1258,5,125,0,0,1257,
		1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,5,3,0,0,1260,
		1262,5,125,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,
		1255,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,3,76,38,0,1266,
		1268,5,125,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1273,1,0,0,0,1269,
		1271,3,66,33,0,1270,1272,5,125,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,
		1272,1274,1,0,0,0,1273,1269,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,
		0,1275,1277,5,11,0,0,1276,1278,5,125,0,0,1277,1276,1,0,0,0,1277,1278,1,
		0,0,0,1278,1279,1,0,0,0,1279,1281,3,102,51,0,1280,1282,5,125,0,0,1281,
		1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,5,9,0,0,1284,
		147,1,0,0,0,1285,1287,5,47,0,0,1286,1288,5,125,0,0,1287,1286,1,0,0,0,1287,
		1288,1,0,0,0,1288,1289,1,0,0,0,1289,1291,5,6,0,0,1290,1292,5,125,0,0,1291,
		1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1295,3,150,75,0,
		1294,1296,5,125,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,
		0,0,1297,1298,5,7,0,0,1298,1342,1,0,0,0,1299,1301,5,89,0,0,1300,1302,5,
		125,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1305,
		5,6,0,0,1304,1306,5,125,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,
		1,0,0,0,1307,1309,3,150,75,0,1308,1310,5,125,0,0,1309,1308,1,0,0,0,1309,
		1310,1,0,0,0,1310,1311,1,0,0,0,1311,1312,5,7,0,0,1312,1342,1,0,0,0,1313,
		1315,5,90,0,0,1314,1316,5,125,0,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,
		1316,1317,1,0,0,0,1317,1319,5,6,0,0,1318,1320,5,125,0,0,1319,1318,1,0,
		0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1323,3,150,75,0,1322,1324,
		5,125,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1326,
		5,7,0,0,1326,1342,1,0,0,0,1327,1329,5,91,0,0,1328,1330,5,125,0,0,1329,
		1328,1,0,0,0,1329,1330,1,0,0,0,1330,1331,1,0,0,0,1331,1333,5,6,0,0,1332,
		1334,5,125,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,
		1337,3,150,75,0,1336,1338,5,125,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,
		0,1338,1339,1,0,0,0,1339,1340,5,7,0,0,1340,1342,1,0,0,0,1341,1285,1,0,
		0,0,1341,1299,1,0,0,0,1341,1313,1,0,0,0,1341,1327,1,0,0,0,1342,149,1,0,
		0,0,1343,1348,3,156,78,0,1344,1346,5,125,0,0,1345,1344,1,0,0,0,1345,1346,
		1,0,0,0,1346,1347,1,0,0,0,1347,1349,3,66,33,0,1348,1345,1,0,0,0,1348,1349,
		1,0,0,0,1349,151,1,0,0,0,1350,1351,3,76,38,0,1351,153,1,0,0,0,1352,1354,
		5,6,0,0,1353,1355,5,125,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1356,
		1,0,0,0,1356,1358,3,102,51,0,1357,1359,5,125,0,0,1358,1357,1,0,0,0,1358,
		1359,1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,7,0,0,1361,155,1,0,0,0,1362,
		1363,3,174,87,0,1363,1364,5,125,0,0,1364,1365,5,80,0,0,1365,1366,5,125,
		0,0,1366,1367,3,102,51,0,1367,157,1,0,0,0,1368,1370,3,160,80,0,1369,1371,
		5,125,0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,
		5,6,0,0,1373,1375,5,125,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1380,
		1,0,0,0,1376,1378,5,63,0,0,1377,1379,5,125,0,0,1378,1377,1,0,0,0,1378,
		1379,1,0,0,0,1379,1381,1,0,0,0,1380,1376,1,0,0,0,1380,1381,1,0,0,0,1381,
		1399,1,0,0,0,1382,1384,3,102,51,0,1383,1385,5,125,0,0,1384,1383,1,0,0,
		0,1384,1385,1,0,0,0,1385,1396,1,0,0,0,1386,1388,5,2,0,0,1387,1389,5,125,
		0,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1392,3,
		102,51,0,1391,1393,5,125,0,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,
		1395,1,0,0,0,1394,1386,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,
		1397,1,0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1399,1382,1,0,0,0,1399,
		1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,5,7,0,0,1402,159,1,0,0,0,1403,
		1404,3,172,86,0,1404,1405,3,198,99,0,1405,161,1,0,0,0,1406,1408,5,92,0,
		0,1407,1409,5,125,0,0,1408,1407,1,0,0,0,1408,1409,1,0,0,0,1409,1410,1,
		0,0,0,1410,1412,5,24,0,0,1411,1413,5,125,0,0,1412,1411,1,0,0,0,1412,1413,
		1,0,0,0,1413,1422,1,0,0,0,1414,1423,3,6,3,0,1415,1420,3,68,34,0,1416,1418,
		5,125,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1421,
		3,66,33,0,1420,1417,1,0,0,0,1420,1421,1,0,0,0,1421,1423,1,0,0,0,1422,1414,
		1,0,0,0,1422,1415,1,0,0,0,1423,1425,1,0,0,0,1424,1426,5,125,0,0,1425,1424,
		1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1428,5,25,0,0,1428,163,
		1,0,0,0,1429,1431,3,170,85,0,1430,1432,5,125,0,0,1431,1430,1,0,0,0,1431,
		1432,1,0,0,0,1432,1433,1,0,0,0,1433,1435,5,6,0,0,1434,1436,5,125,0,0,1435,
		1434,1,0,0,0,1435,1436,1,0,0,0,1436,1454,1,0,0,0,1437,1439,3,102,51,0,
		1438,1440,5,125,0,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1451,1,0,
		0,0,1441,1443,5,2,0,0,1442,1444,5,125,0,0,1443,1442,1,0,0,0,1443,1444,
		1,0,0,0,1444,1445,1,0,0,0,1445,1447,3,102,51,0,1446,1448,5,125,0,0,1447,
		1446,1,0,0,0,1447,1448,1,0,0,0,1448,1450,1,0,0,0,1449,1441,1,0,0,0,1450,
		1453,1,0,0,0,1451,1449,1,0,0,0,1451,1452,1,0,0,0,1452,1455,1,0,0,0,1453,
		1451,1,0,0,0,1454,1437,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,
		1457,5,7,0,0,1457,165,1,0,0,0,1458,1459,3,170,85,0,1459,167,1,0,0,0,1460,
		1461,3,198,99,0,1461,169,1,0,0,0,1462,1463,3,172,86,0,1463,1464,3,198,
		99,0,1464,171,1,0,0,0,1465,1466,3,198,99,0,1466,1467,5,23,0,0,1467,1469,
		1,0,0,0,1468,1465,1,0,0,0,1469,1472,1,0,0,0,1470,1468,1,0,0,0,1470,1471,
		1,0,0,0,1471,173,1,0,0,0,1472,1470,1,0,0,0,1473,1474,3,198,99,0,1474,175,
		1,0,0,0,1475,1482,3,178,89,0,1476,1482,5,82,0,0,1477,1482,3,180,90,0,1478,
		1482,5,107,0,0,1479,1482,3,186,93,0,1480,1482,3,188,94,0,1481,1475,1,0,
		0,0,1481,1476,1,0,0,0,1481,1477,1,0,0,0,1481,1478,1,0,0,0,1481,1479,1,
		0,0,0,1481,1480,1,0,0,0,1482,177,1,0,0,0,1483,1484,7,2,0,0,1484,179,1,
		0,0,0,1485,1488,3,184,92,0,1486,1488,3,182,91,0,1487,1485,1,0,0,0,1487,
		1486,1,0,0,0,1488,181,1,0,0,0,1489,1490,7,3,0,0,1490,183,1,0,0,0,1491,
		1492,7,4,0,0,1492,185,1,0,0,0,1493,1495,5,8,0,0,1494,1496,5,125,0,0,1495,
		1494,1,0,0,0,1495,1496,1,0,0,0,1496,1514,1,0,0,0,1497,1499,3,102,51,0,
		1498,1500,5,125,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1511,1,0,
		0,0,1501,1503,5,2,0,0,1502,1504,5,125,0,0,1503,1502,1,0,0,0,1503,1504,
		1,0,0,0,1504,1505,1,0,0,0,1505,1507,3,102,51,0,1506,1508,5,125,0,0,1507,
		1506,1,0,0,0,1507,1508,1,0,0,0,1508,1510,1,0,0,0,1509,1501,1,0,0,0,1510,
		1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1515,1,0,0,0,1513,
		1511,1,0,0,0,1514,1497,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,
		1517,5,9,0,0,1517,187,1,0,0,0,1518,1520,5,24,0,0,1519,1521,5,125,0,0,1520,
		1519,1,0,0,0,1520,1521,1,0,0,0,1521,1555,1,0,0,0,1522,1524,3,190,95,0,
		1523,1525,5,125,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,
		0,0,1526,1528,5,10,0,0,1527,1529,5,125,0,0,1528,1527,1,0,0,0,1528,1529,
		1,0,0,0,1529,1530,1,0,0,0,1530,1532,3,102,51,0,1531,1533,5,125,0,0,1532,
		1531,1,0,0,0,1532,1533,1,0,0,0,1533,1552,1,0,0,0,1534,1536,5,2,0,0,1535,
		1537,5,125,0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,
		1540,3,190,95,0,1539,1541,5,125,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,
		0,1541,1542,1,0,0,0,1542,1544,5,10,0,0,1543,1545,5,125,0,0,1544,1543,1,
		0,0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,1548,3,102,51,0,1547,1549,
		5,125,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1551,1,0,0,0,1550,1534,
		1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,1552,1553,1,0,0,0,1553,1556,
		1,0,0,0,1554,1552,1,0,0,0,1555,1522,1,0,0,0,1555,1556,1,0,0,0,1556,1557,
		1,0,0,0,1557,1558,5,25,0,0,1558,189,1,0,0,0,1559,1560,3,194,97,0,1560,
		191,1,0,0,0,1561,1564,5,26,0,0,1562,1565,3,198,99,0,1563,1565,5,96,0,0,
		1564,1562,1,0,0,0,1564,1563,1,0,0,0,1565,193,1,0,0,0,1566,1569,3,198,99,
		0,1567,1569,3,196,98,0,1568,1566,1,0,0,0,1568,1567,1,0,0,0,1569,195,1,
		0,0,0,1570,1571,7,5,0,0,1571,197,1,0,0,0,1572,1573,7,6,0,0,1573,199,1,
		0,0,0,1574,1575,7,7,0,0,1575,201,1,0,0,0,1576,1577,7,8,0,0,1577,203,1,
		0,0,0,1578,1579,7,9,0,0,1579,205,1,0,0,0,292,207,211,214,217,225,229,234,
		241,246,249,253,257,261,267,271,276,281,285,288,290,294,298,303,307,312,
		316,325,330,334,338,342,345,349,359,366,379,383,389,393,397,402,407,411,
		417,421,427,431,437,441,445,449,453,457,462,469,473,478,485,491,496,502,
		505,511,513,517,521,526,530,533,540,547,550,556,559,565,569,573,577,581,
		586,591,595,600,603,612,621,626,639,642,650,654,659,664,668,673,679,684,
		691,695,700,704,708,710,714,716,720,722,728,734,738,741,744,748,754,758,
		761,764,770,773,776,780,786,789,792,796,800,804,806,810,812,815,819,821,
		827,831,835,839,842,847,852,857,862,868,872,874,878,882,884,886,894,899,
		910,920,930,935,939,946,951,956,961,966,971,976,981,984,990,992,1005,1008,
		1015,1029,1033,1037,1041,1045,1048,1050,1055,1059,1063,1067,1071,1075,
		1078,1080,1085,1089,1094,1100,1103,1107,1114,1118,1122,1125,1127,1132,
		1137,1141,1144,1148,1157,1161,1165,1176,1180,1185,1189,1193,1198,1200,
		1203,1207,1210,1213,1219,1223,1227,1233,1237,1241,1244,1247,1253,1257,
		1261,1263,1267,1271,1273,1277,1281,1287,1291,1295,1301,1305,1309,1315,
		1319,1323,1329,1333,1337,1341,1345,1348,1354,1358,1370,1374,1378,1380,
		1384,1388,1392,1396,1399,1408,1412,1417,1420,1422,1425,1431,1435,1439,
		1443,1447,1451,1454,1470,1481,1487,1495,1499,1503,1507,1511,1514,1520,
		1524,1528,1532,1536,1540,1544,1548,1552,1555,1564,1568
	};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
}